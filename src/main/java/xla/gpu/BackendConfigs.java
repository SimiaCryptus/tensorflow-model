/*
 * Copyright (c) 2019 by Andrew Charneski.
 *
 * The author licenses this file to you under the
 * Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance
 * with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backend_configs.proto

package xla.gpu;

public final class BackendConfigs {
  private BackendConfigs() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface CudnnConvBackendConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:xla.gpu.CudnnConvBackendConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Opaque algorithm number of cudnn algorithm chosen for this conv.
     * </pre>
     *
     * <code>int64 algorithm = 1;</code>
     */
    long getAlgorithm();

    /**
     * <pre>
     * Whether we may use tensor cores when running this conv.  Even if this is
     * true, cudnn may choose not to use tensor cores, e.g. because the GPU or
     * selected algorithm doesn't support it.
     * </pre>
     *
     * <code>bool tensor_ops_enabled = 2;</code>
     */
    boolean getTensorOpsEnabled();

    /**
     * <pre>
     * The scaling factor multiplied with the convolution result.
     * </pre>
     *
     * <code>double conv_result_scale = 4;</code>
     */
    double getConvResultScale();

    /**
     * <pre>
     * The requested activation (e.g. relu) after the convolution. It is with type
     * stream_executor::dnn::ActivationMode.
     * </pre>
     *
     * <code>int64 activation_mode = 3;</code>
     */
    long getActivationMode();

    /**
     * <pre>
     * The scaling factor multiplied with the side input. If no side input buffer
     * is provided, this field must be 0.
     * </pre>
     *
     * <code>double side_input_scale = 5;</code>
     */
    double getSideInputScale();
  }
  /**
   * <pre>
   * Backend config for a convolution that runs through cudnn.
   * </pre>
   *
   * Protobuf type {@code xla.gpu.CudnnConvBackendConfig}
   */
  public  static final class CudnnConvBackendConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:xla.gpu.CudnnConvBackendConfig)
      CudnnConvBackendConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CudnnConvBackendConfig.newBuilder() to construct.
    private CudnnConvBackendConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CudnnConvBackendConfig() {
      algorithm_ = 0L;
      tensorOpsEnabled_ = false;
      convResultScale_ = 0D;
      activationMode_ = 0L;
      sideInputScale_ = 0D;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CudnnConvBackendConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              algorithm_ = input.readInt64();
              break;
            }
            case 16: {

              tensorOpsEnabled_ = input.readBool();
              break;
            }
            case 24: {

              activationMode_ = input.readInt64();
              break;
            }
            case 33: {

              convResultScale_ = input.readDouble();
              break;
            }
            case 41: {

              sideInputScale_ = input.readDouble();
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return xla.gpu.BackendConfigs.internal_static_xla_gpu_CudnnConvBackendConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return xla.gpu.BackendConfigs.internal_static_xla_gpu_CudnnConvBackendConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              xla.gpu.BackendConfigs.CudnnConvBackendConfig.class, xla.gpu.BackendConfigs.CudnnConvBackendConfig.Builder.class);
    }

    public static final int ALGORITHM_FIELD_NUMBER = 1;
    private long algorithm_;
    /**
     * <pre>
     * Opaque algorithm number of cudnn algorithm chosen for this conv.
     * </pre>
     *
     * <code>int64 algorithm = 1;</code>
     */
    public long getAlgorithm() {
      return algorithm_;
    }

    public static final int TENSOR_OPS_ENABLED_FIELD_NUMBER = 2;
    private boolean tensorOpsEnabled_;
    /**
     * <pre>
     * Whether we may use tensor cores when running this conv.  Even if this is
     * true, cudnn may choose not to use tensor cores, e.g. because the GPU or
     * selected algorithm doesn't support it.
     * </pre>
     *
     * <code>bool tensor_ops_enabled = 2;</code>
     */
    public boolean getTensorOpsEnabled() {
      return tensorOpsEnabled_;
    }

    public static final int CONV_RESULT_SCALE_FIELD_NUMBER = 4;
    private double convResultScale_;
    /**
     * <pre>
     * The scaling factor multiplied with the convolution result.
     * </pre>
     *
     * <code>double conv_result_scale = 4;</code>
     */
    public double getConvResultScale() {
      return convResultScale_;
    }

    public static final int ACTIVATION_MODE_FIELD_NUMBER = 3;
    private long activationMode_;
    /**
     * <pre>
     * The requested activation (e.g. relu) after the convolution. It is with type
     * stream_executor::dnn::ActivationMode.
     * </pre>
     *
     * <code>int64 activation_mode = 3;</code>
     */
    public long getActivationMode() {
      return activationMode_;
    }

    public static final int SIDE_INPUT_SCALE_FIELD_NUMBER = 5;
    private double sideInputScale_;
    /**
     * <pre>
     * The scaling factor multiplied with the side input. If no side input buffer
     * is provided, this field must be 0.
     * </pre>
     *
     * <code>double side_input_scale = 5;</code>
     */
    public double getSideInputScale() {
      return sideInputScale_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (algorithm_ != 0L) {
        output.writeInt64(1, algorithm_);
      }
      if (tensorOpsEnabled_ != false) {
        output.writeBool(2, tensorOpsEnabled_);
      }
      if (activationMode_ != 0L) {
        output.writeInt64(3, activationMode_);
      }
      if (convResultScale_ != 0D) {
        output.writeDouble(4, convResultScale_);
      }
      if (sideInputScale_ != 0D) {
        output.writeDouble(5, sideInputScale_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (algorithm_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, algorithm_);
      }
      if (tensorOpsEnabled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, tensorOpsEnabled_);
      }
      if (activationMode_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, activationMode_);
      }
      if (convResultScale_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, convResultScale_);
      }
      if (sideInputScale_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, sideInputScale_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof xla.gpu.BackendConfigs.CudnnConvBackendConfig)) {
        return super.equals(obj);
      }
      xla.gpu.BackendConfigs.CudnnConvBackendConfig other = (xla.gpu.BackendConfigs.CudnnConvBackendConfig) obj;

      boolean result = true;
      result = result && (getAlgorithm()
          == other.getAlgorithm());
      result = result && (getTensorOpsEnabled()
          == other.getTensorOpsEnabled());
      result = result && (
          java.lang.Double.doubleToLongBits(getConvResultScale())
          == java.lang.Double.doubleToLongBits(
              other.getConvResultScale()));
      result = result && (getActivationMode()
          == other.getActivationMode());
      result = result && (
          java.lang.Double.doubleToLongBits(getSideInputScale())
          == java.lang.Double.doubleToLongBits(
              other.getSideInputScale()));
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ALGORITHM_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getAlgorithm());
      hash = (37 * hash) + TENSOR_OPS_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getTensorOpsEnabled());
      hash = (37 * hash) + CONV_RESULT_SCALE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getConvResultScale()));
      hash = (37 * hash) + ACTIVATION_MODE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getActivationMode());
      hash = (37 * hash) + SIDE_INPUT_SCALE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getSideInputScale()));
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static xla.gpu.BackendConfigs.CudnnConvBackendConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static xla.gpu.BackendConfigs.CudnnConvBackendConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static xla.gpu.BackendConfigs.CudnnConvBackendConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static xla.gpu.BackendConfigs.CudnnConvBackendConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static xla.gpu.BackendConfigs.CudnnConvBackendConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static xla.gpu.BackendConfigs.CudnnConvBackendConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static xla.gpu.BackendConfigs.CudnnConvBackendConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static xla.gpu.BackendConfigs.CudnnConvBackendConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static xla.gpu.BackendConfigs.CudnnConvBackendConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static xla.gpu.BackendConfigs.CudnnConvBackendConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static xla.gpu.BackendConfigs.CudnnConvBackendConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static xla.gpu.BackendConfigs.CudnnConvBackendConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(xla.gpu.BackendConfigs.CudnnConvBackendConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Backend config for a convolution that runs through cudnn.
     * </pre>
     *
     * Protobuf type {@code xla.gpu.CudnnConvBackendConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:xla.gpu.CudnnConvBackendConfig)
        xla.gpu.BackendConfigs.CudnnConvBackendConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return xla.gpu.BackendConfigs.internal_static_xla_gpu_CudnnConvBackendConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return xla.gpu.BackendConfigs.internal_static_xla_gpu_CudnnConvBackendConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                xla.gpu.BackendConfigs.CudnnConvBackendConfig.class, xla.gpu.BackendConfigs.CudnnConvBackendConfig.Builder.class);
      }

      // Construct using xla.gpu.BackendConfigs.CudnnConvBackendConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        algorithm_ = 0L;

        tensorOpsEnabled_ = false;

        convResultScale_ = 0D;

        activationMode_ = 0L;

        sideInputScale_ = 0D;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return xla.gpu.BackendConfigs.internal_static_xla_gpu_CudnnConvBackendConfig_descriptor;
      }

      @java.lang.Override
      public xla.gpu.BackendConfigs.CudnnConvBackendConfig getDefaultInstanceForType() {
        return xla.gpu.BackendConfigs.CudnnConvBackendConfig.getDefaultInstance();
      }

      @java.lang.Override
      public xla.gpu.BackendConfigs.CudnnConvBackendConfig build() {
        xla.gpu.BackendConfigs.CudnnConvBackendConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public xla.gpu.BackendConfigs.CudnnConvBackendConfig buildPartial() {
        xla.gpu.BackendConfigs.CudnnConvBackendConfig result = new xla.gpu.BackendConfigs.CudnnConvBackendConfig(this);
        result.algorithm_ = algorithm_;
        result.tensorOpsEnabled_ = tensorOpsEnabled_;
        result.convResultScale_ = convResultScale_;
        result.activationMode_ = activationMode_;
        result.sideInputScale_ = sideInputScale_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof xla.gpu.BackendConfigs.CudnnConvBackendConfig) {
          return mergeFrom((xla.gpu.BackendConfigs.CudnnConvBackendConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(xla.gpu.BackendConfigs.CudnnConvBackendConfig other) {
        if (other == xla.gpu.BackendConfigs.CudnnConvBackendConfig.getDefaultInstance()) return this;
        if (other.getAlgorithm() != 0L) {
          setAlgorithm(other.getAlgorithm());
        }
        if (other.getTensorOpsEnabled() != false) {
          setTensorOpsEnabled(other.getTensorOpsEnabled());
        }
        if (other.getConvResultScale() != 0D) {
          setConvResultScale(other.getConvResultScale());
        }
        if (other.getActivationMode() != 0L) {
          setActivationMode(other.getActivationMode());
        }
        if (other.getSideInputScale() != 0D) {
          setSideInputScale(other.getSideInputScale());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        xla.gpu.BackendConfigs.CudnnConvBackendConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (xla.gpu.BackendConfigs.CudnnConvBackendConfig) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long algorithm_ ;
      /**
       * <pre>
       * Opaque algorithm number of cudnn algorithm chosen for this conv.
       * </pre>
       *
       * <code>int64 algorithm = 1;</code>
       */
      public long getAlgorithm() {
        return algorithm_;
      }
      /**
       * <pre>
       * Opaque algorithm number of cudnn algorithm chosen for this conv.
       * </pre>
       *
       * <code>int64 algorithm = 1;</code>
       */
      public Builder setAlgorithm(long value) {
        
        algorithm_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Opaque algorithm number of cudnn algorithm chosen for this conv.
       * </pre>
       *
       * <code>int64 algorithm = 1;</code>
       */
      public Builder clearAlgorithm() {
        
        algorithm_ = 0L;
        onChanged();
        return this;
      }

      private boolean tensorOpsEnabled_ ;
      /**
       * <pre>
       * Whether we may use tensor cores when running this conv.  Even if this is
       * true, cudnn may choose not to use tensor cores, e.g. because the GPU or
       * selected algorithm doesn't support it.
       * </pre>
       *
       * <code>bool tensor_ops_enabled = 2;</code>
       */
      public boolean getTensorOpsEnabled() {
        return tensorOpsEnabled_;
      }
      /**
       * <pre>
       * Whether we may use tensor cores when running this conv.  Even if this is
       * true, cudnn may choose not to use tensor cores, e.g. because the GPU or
       * selected algorithm doesn't support it.
       * </pre>
       *
       * <code>bool tensor_ops_enabled = 2;</code>
       */
      public Builder setTensorOpsEnabled(boolean value) {
        
        tensorOpsEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether we may use tensor cores when running this conv.  Even if this is
       * true, cudnn may choose not to use tensor cores, e.g. because the GPU or
       * selected algorithm doesn't support it.
       * </pre>
       *
       * <code>bool tensor_ops_enabled = 2;</code>
       */
      public Builder clearTensorOpsEnabled() {
        
        tensorOpsEnabled_ = false;
        onChanged();
        return this;
      }

      private double convResultScale_ ;
      /**
       * <pre>
       * The scaling factor multiplied with the convolution result.
       * </pre>
       *
       * <code>double conv_result_scale = 4;</code>
       */
      public double getConvResultScale() {
        return convResultScale_;
      }
      /**
       * <pre>
       * The scaling factor multiplied with the convolution result.
       * </pre>
       *
       * <code>double conv_result_scale = 4;</code>
       */
      public Builder setConvResultScale(double value) {
        
        convResultScale_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The scaling factor multiplied with the convolution result.
       * </pre>
       *
       * <code>double conv_result_scale = 4;</code>
       */
      public Builder clearConvResultScale() {
        
        convResultScale_ = 0D;
        onChanged();
        return this;
      }

      private long activationMode_ ;
      /**
       * <pre>
       * The requested activation (e.g. relu) after the convolution. It is with type
       * stream_executor::dnn::ActivationMode.
       * </pre>
       *
       * <code>int64 activation_mode = 3;</code>
       */
      public long getActivationMode() {
        return activationMode_;
      }
      /**
       * <pre>
       * The requested activation (e.g. relu) after the convolution. It is with type
       * stream_executor::dnn::ActivationMode.
       * </pre>
       *
       * <code>int64 activation_mode = 3;</code>
       */
      public Builder setActivationMode(long value) {
        
        activationMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The requested activation (e.g. relu) after the convolution. It is with type
       * stream_executor::dnn::ActivationMode.
       * </pre>
       *
       * <code>int64 activation_mode = 3;</code>
       */
      public Builder clearActivationMode() {
        
        activationMode_ = 0L;
        onChanged();
        return this;
      }

      private double sideInputScale_ ;
      /**
       * <pre>
       * The scaling factor multiplied with the side input. If no side input buffer
       * is provided, this field must be 0.
       * </pre>
       *
       * <code>double side_input_scale = 5;</code>
       */
      public double getSideInputScale() {
        return sideInputScale_;
      }
      /**
       * <pre>
       * The scaling factor multiplied with the side input. If no side input buffer
       * is provided, this field must be 0.
       * </pre>
       *
       * <code>double side_input_scale = 5;</code>
       */
      public Builder setSideInputScale(double value) {
        
        sideInputScale_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The scaling factor multiplied with the side input. If no side input buffer
       * is provided, this field must be 0.
       * </pre>
       *
       * <code>double side_input_scale = 5;</code>
       */
      public Builder clearSideInputScale() {
        
        sideInputScale_ = 0D;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:xla.gpu.CudnnConvBackendConfig)
    }

    // @@protoc_insertion_point(class_scope:xla.gpu.CudnnConvBackendConfig)
    private static final xla.gpu.BackendConfigs.CudnnConvBackendConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new xla.gpu.BackendConfigs.CudnnConvBackendConfig();
    }

    public static xla.gpu.BackendConfigs.CudnnConvBackendConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CudnnConvBackendConfig>
        PARSER = new com.google.protobuf.AbstractParser<CudnnConvBackendConfig>() {
      @java.lang.Override
      public CudnnConvBackendConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CudnnConvBackendConfig(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CudnnConvBackendConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CudnnConvBackendConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public xla.gpu.BackendConfigs.CudnnConvBackendConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_xla_gpu_CudnnConvBackendConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_xla_gpu_CudnnConvBackendConfig_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025backend_configs.proto\022\007xla.gpu\"\225\001\n\026Cud" +
      "nnConvBackendConfig\022\021\n\talgorithm\030\001 \001(\003\022\032" +
      "\n\022tensor_ops_enabled\030\002 \001(\010\022\031\n\021conv_resul" +
      "t_scale\030\004 \001(\001\022\027\n\017activation_mode\030\003 \001(\003\022\030" +
      "\n\020side_input_scale\030\005 \001(\001b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_xla_gpu_CudnnConvBackendConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_xla_gpu_CudnnConvBackendConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_xla_gpu_CudnnConvBackendConfig_descriptor,
        new java.lang.String[] { "Algorithm", "TensorOpsEnabled", "ConvResultScale", "ActivationMode", "SideInputScale", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
