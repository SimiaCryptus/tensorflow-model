/*
 * Copyright (c) 2019 by Andrew Charneski.
 *
 * The author licenses this file to you under the
 * Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance
 * with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dnn.proto

package stream_executor.dnn;

public final class Dnn {
  private Dnn() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * Specifies the data type used by an operation.
   * </pre>
   *
   * Protobuf enum {@code stream_executor.dnn.DataType}
   */
  public enum DataType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>kFloat = 0;</code>
     */
    kFloat(0),
    /**
     * <code>kDouble = 1;</code>
     */
    kDouble(1),
    /**
     * <code>kHalf = 2;</code>
     */
    kHalf(2),
    /**
     * <code>kInt8 = 3;</code>
     */
    kInt8(3),
    /**
     * <code>kInt32 = 4;</code>
     */
    kInt32(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>kFloat = 0;</code>
     */
    public static final int kFloat_VALUE = 0;
    /**
     * <code>kDouble = 1;</code>
     */
    public static final int kDouble_VALUE = 1;
    /**
     * <code>kHalf = 2;</code>
     */
    public static final int kHalf_VALUE = 2;
    /**
     * <code>kInt8 = 3;</code>
     */
    public static final int kInt8_VALUE = 3;
    /**
     * <code>kInt32 = 4;</code>
     */
    public static final int kInt32_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DataType valueOf(int value) {
      return forNumber(value);
    }

    public static DataType forNumber(int value) {
      switch (value) {
        case 0: return kFloat;
        case 1: return kDouble;
        case 2: return kHalf;
        case 3: return kInt8;
        case 4: return kInt32;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DataType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DataType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DataType>() {
            public DataType findValueByNumber(int number) {
              return DataType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return stream_executor.dnn.Dnn.getDescriptor().getEnumTypes().get(0);
    }

    private static final DataType[] VALUES = values();

    public static DataType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    DataType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:stream_executor.dnn.DataType)
  }

  /**
   * <pre>
   * Describes how a convolution input or output layer's data is formatted.
   * </pre>
   *
   * Protobuf enum {@code stream_executor.dnn.DataLayout}
   */
  public enum DataLayout
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Naming convention:
     * Y &lt;-&gt; row or height
     * X &lt;-&gt; column or width
     * Batch &lt;-&gt; batch, or N
     * Depth &lt;-&gt; feature, or channel
     * TODO(timshen): turn them into cuDNN names, e.g. kNCHW.
     * </pre>
     *
     * <code>kYXDepthBatch = 0;</code>
     */
    kYXDepthBatch(0),
    /**
     * <code>kYXBatchDepth = 1;</code>
     */
    kYXBatchDepth(1),
    /**
     * <pre>
     * cuDNN's NHWC layout
     * </pre>
     *
     * <code>kBatchYXDepth = 2;</code>
     */
    kBatchYXDepth(2),
    /**
     * <pre>
     * cuDNN's NCHW layout
     * </pre>
     *
     * <code>kBatchDepthYX = 3;</code>
     */
    kBatchDepthYX(3),
    /**
     * <pre>
     * cuDNN's NCHW_VECT_C layout
     * </pre>
     *
     * <code>kBatchDepthYX4 = 4;</code>
     */
    kBatchDepthYX4(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Naming convention:
     * Y &lt;-&gt; row or height
     * X &lt;-&gt; column or width
     * Batch &lt;-&gt; batch, or N
     * Depth &lt;-&gt; feature, or channel
     * TODO(timshen): turn them into cuDNN names, e.g. kNCHW.
     * </pre>
     *
     * <code>kYXDepthBatch = 0;</code>
     */
    public static final int kYXDepthBatch_VALUE = 0;
    /**
     * <code>kYXBatchDepth = 1;</code>
     */
    public static final int kYXBatchDepth_VALUE = 1;
    /**
     * <pre>
     * cuDNN's NHWC layout
     * </pre>
     *
     * <code>kBatchYXDepth = 2;</code>
     */
    public static final int kBatchYXDepth_VALUE = 2;
    /**
     * <pre>
     * cuDNN's NCHW layout
     * </pre>
     *
     * <code>kBatchDepthYX = 3;</code>
     */
    public static final int kBatchDepthYX_VALUE = 3;
    /**
     * <pre>
     * cuDNN's NCHW_VECT_C layout
     * </pre>
     *
     * <code>kBatchDepthYX4 = 4;</code>
     */
    public static final int kBatchDepthYX4_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DataLayout valueOf(int value) {
      return forNumber(value);
    }

    public static DataLayout forNumber(int value) {
      switch (value) {
        case 0: return kYXDepthBatch;
        case 1: return kYXBatchDepth;
        case 2: return kBatchYXDepth;
        case 3: return kBatchDepthYX;
        case 4: return kBatchDepthYX4;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DataLayout>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DataLayout> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DataLayout>() {
            public DataLayout findValueByNumber(int number) {
              return DataLayout.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return stream_executor.dnn.Dnn.getDescriptor().getEnumTypes().get(1);
    }

    private static final DataLayout[] VALUES = values();

    public static DataLayout valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    DataLayout(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:stream_executor.dnn.DataLayout)
  }

  /**
   * <pre>
   * Describes how a convolution filter is laid out in the memory.
   * </pre>
   *
   * Protobuf enum {@code stream_executor.dnn.FilterLayout}
   */
  public enum FilterLayout
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Naming convention:
     * Y &lt;-&gt; row or height
     * X &lt;-&gt; column or width
     * Output &lt;-&gt; output feature, or N
     * Input &lt;-&gt; input feature, or N
     * TODO(timshen): turn them into cuDNN names, e.g. kNCHW.
     * </pre>
     *
     * <code>kOutputInputYX = 0;</code>
     */
    kOutputInputYX(0),
    /**
     * <pre>
     * cuDNN's NHWC layout
     * </pre>
     *
     * <code>kOutputYXInput = 1;</code>
     */
    kOutputYXInput(1),
    /**
     * <pre>
     * cuDNN's NCHW_VECT_C layout
     * </pre>
     *
     * <code>kOutputInputYX4 = 2;</code>
     */
    kOutputInputYX4(2),
    /**
     * <code>kInputYXOutput = 3;</code>
     */
    kInputYXOutput(3),
    /**
     * <code>kYXInputOutput = 4;</code>
     */
    kYXInputOutput(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Naming convention:
     * Y &lt;-&gt; row or height
     * X &lt;-&gt; column or width
     * Output &lt;-&gt; output feature, or N
     * Input &lt;-&gt; input feature, or N
     * TODO(timshen): turn them into cuDNN names, e.g. kNCHW.
     * </pre>
     *
     * <code>kOutputInputYX = 0;</code>
     */
    public static final int kOutputInputYX_VALUE = 0;
    /**
     * <pre>
     * cuDNN's NHWC layout
     * </pre>
     *
     * <code>kOutputYXInput = 1;</code>
     */
    public static final int kOutputYXInput_VALUE = 1;
    /**
     * <pre>
     * cuDNN's NCHW_VECT_C layout
     * </pre>
     *
     * <code>kOutputInputYX4 = 2;</code>
     */
    public static final int kOutputInputYX4_VALUE = 2;
    /**
     * <code>kInputYXOutput = 3;</code>
     */
    public static final int kInputYXOutput_VALUE = 3;
    /**
     * <code>kYXInputOutput = 4;</code>
     */
    public static final int kYXInputOutput_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static FilterLayout valueOf(int value) {
      return forNumber(value);
    }

    public static FilterLayout forNumber(int value) {
      switch (value) {
        case 0: return kOutputInputYX;
        case 1: return kOutputYXInput;
        case 2: return kOutputInputYX4;
        case 3: return kInputYXOutput;
        case 4: return kYXInputOutput;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<FilterLayout>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        FilterLayout> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<FilterLayout>() {
            public FilterLayout findValueByNumber(int number) {
              return FilterLayout.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return stream_executor.dnn.Dnn.getDescriptor().getEnumTypes().get(2);
    }

    private static final FilterLayout[] VALUES = values();

    public static FilterLayout valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    FilterLayout(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:stream_executor.dnn.FilterLayout)
  }

  /**
   * <pre>
   * Describes a kind of non-linearity (threshold-like mathematical function).
   * </pre>
   *
   * Protobuf enum {@code stream_executor.dnn.ActivationMode}
   */
  public enum ActivationMode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>kNone = 0;</code>
     */
    kNone(0),
    /**
     * <code>kSigmoid = 1;</code>
     */
    kSigmoid(1),
    /**
     * <pre>
     * Rectified linear activation: f(x) = x &lt; 0 ? 0 : x
     * </pre>
     *
     * <code>kRelu = 2;</code>
     */
    kRelu(2),
    /**
     * <pre>
     * Rectified linear activation; where upper maximum is 6.0.
     * </pre>
     *
     * <code>kRelu6 = 3;</code>
     */
    kRelu6(3),
    /**
     * <pre>
     * Rectified linear activation; where upper maximum specified by
     * BatchDescriptor::value_max().
     * </pre>
     *
     * <code>kReluX = 4;</code>
     */
    kReluX(4),
    /**
     * <code>kTanh = 5;</code>
     */
    kTanh(5),
    /**
     * <pre>
     * Like ReluX; but passes all values in the range [-X,X].
     * </pre>
     *
     * <code>kBandPass = 6;</code>
     */
    kBandPass(6),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>kNone = 0;</code>
     */
    public static final int kNone_VALUE = 0;
    /**
     * <code>kSigmoid = 1;</code>
     */
    public static final int kSigmoid_VALUE = 1;
    /**
     * <pre>
     * Rectified linear activation: f(x) = x &lt; 0 ? 0 : x
     * </pre>
     *
     * <code>kRelu = 2;</code>
     */
    public static final int kRelu_VALUE = 2;
    /**
     * <pre>
     * Rectified linear activation; where upper maximum is 6.0.
     * </pre>
     *
     * <code>kRelu6 = 3;</code>
     */
    public static final int kRelu6_VALUE = 3;
    /**
     * <pre>
     * Rectified linear activation; where upper maximum specified by
     * BatchDescriptor::value_max().
     * </pre>
     *
     * <code>kReluX = 4;</code>
     */
    public static final int kReluX_VALUE = 4;
    /**
     * <code>kTanh = 5;</code>
     */
    public static final int kTanh_VALUE = 5;
    /**
     * <pre>
     * Like ReluX; but passes all values in the range [-X,X].
     * </pre>
     *
     * <code>kBandPass = 6;</code>
     */
    public static final int kBandPass_VALUE = 6;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ActivationMode valueOf(int value) {
      return forNumber(value);
    }

    public static ActivationMode forNumber(int value) {
      switch (value) {
        case 0: return kNone;
        case 1: return kSigmoid;
        case 2: return kRelu;
        case 3: return kRelu6;
        case 4: return kReluX;
        case 5: return kTanh;
        case 6: return kBandPass;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ActivationMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ActivationMode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ActivationMode>() {
            public ActivationMode findValueByNumber(int number) {
              return ActivationMode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return stream_executor.dnn.Dnn.getDescriptor().getEnumTypes().get(3);
    }

    private static final ActivationMode[] VALUES = values();

    public static ActivationMode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    ActivationMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:stream_executor.dnn.ActivationMode)
  }

  /**
   * <pre>
   * Describe the math definition for the conv op. The popular behavior is
   * actually called cross-correlation in math, despite the operation is often
   * referred as convolution. See cuDNN cudnnConvolutionMode_t.
   * </pre>
   *
   * Protobuf enum {@code stream_executor.dnn.ConvolutionMode}
   */
  public enum ConvolutionMode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CROSS_CORRELATION = 0;</code>
     */
    CROSS_CORRELATION(0),
    /**
     * <code>CONVOLUTION = 1;</code>
     */
    CONVOLUTION(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>CROSS_CORRELATION = 0;</code>
     */
    public static final int CROSS_CORRELATION_VALUE = 0;
    /**
     * <code>CONVOLUTION = 1;</code>
     */
    public static final int CONVOLUTION_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ConvolutionMode valueOf(int value) {
      return forNumber(value);
    }

    public static ConvolutionMode forNumber(int value) {
      switch (value) {
        case 0: return CROSS_CORRELATION;
        case 1: return CONVOLUTION;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ConvolutionMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ConvolutionMode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ConvolutionMode>() {
            public ConvolutionMode findValueByNumber(int number) {
              return ConvolutionMode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return stream_executor.dnn.Dnn.getDescriptor().getEnumTypes().get(4);
    }

    private static final ConvolutionMode[] VALUES = values();

    public static ConvolutionMode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    ConvolutionMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:stream_executor.dnn.ConvolutionMode)
  }

  /**
   * Protobuf enum {@code stream_executor.dnn.ConvolutionKind}
   */
  public enum ConvolutionKind
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>INVALID = 0;</code>
     */
    INVALID(0),
    /**
     * <code>FORWARD = 1;</code>
     */
    FORWARD(1),
    /**
     * <code>BACKWARD_FILTER = 2;</code>
     */
    BACKWARD_FILTER(2),
    /**
     * <code>BACKWARD_DATA = 3;</code>
     */
    BACKWARD_DATA(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>INVALID = 0;</code>
     */
    public static final int INVALID_VALUE = 0;
    /**
     * <code>FORWARD = 1;</code>
     */
    public static final int FORWARD_VALUE = 1;
    /**
     * <code>BACKWARD_FILTER = 2;</code>
     */
    public static final int BACKWARD_FILTER_VALUE = 2;
    /**
     * <code>BACKWARD_DATA = 3;</code>
     */
    public static final int BACKWARD_DATA_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ConvolutionKind valueOf(int value) {
      return forNumber(value);
    }

    public static ConvolutionKind forNumber(int value) {
      switch (value) {
        case 0: return INVALID;
        case 1: return FORWARD;
        case 2: return BACKWARD_FILTER;
        case 3: return BACKWARD_DATA;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ConvolutionKind>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ConvolutionKind> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ConvolutionKind>() {
            public ConvolutionKind findValueByNumber(int number) {
              return ConvolutionKind.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return stream_executor.dnn.Dnn.getDescriptor().getEnumTypes().get(5);
    }

    private static final ConvolutionKind[] VALUES = values();

    public static ConvolutionKind valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    ConvolutionKind(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:stream_executor.dnn.ConvolutionKind)
  }

  public interface TensorDescriptorProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:stream_executor.dnn.TensorDescriptorProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated int64 dimensions = 1;</code>
     */
    java.util.List<java.lang.Long> getDimensionsList();
    /**
     * <code>repeated int64 dimensions = 1;</code>
     */
    int getDimensionsCount();
    /**
     * <code>repeated int64 dimensions = 1;</code>
     */
    long getDimensions(int index);

    /**
     * <code>.stream_executor.dnn.DataType data_type = 2;</code>
     */
    int getDataTypeValue();
    /**
     * <code>.stream_executor.dnn.DataType data_type = 2;</code>
     */
    stream_executor.dnn.Dnn.DataType getDataType();

    /**
     * <code>.stream_executor.dnn.DataLayout data_layout = 3;</code>
     */
    int getDataLayoutValue();
    /**
     * <code>.stream_executor.dnn.DataLayout data_layout = 3;</code>
     */
    stream_executor.dnn.Dnn.DataLayout getDataLayout();

    /**
     * <code>.stream_executor.dnn.FilterLayout filter_layout = 4;</code>
     */
    int getFilterLayoutValue();
    /**
     * <code>.stream_executor.dnn.FilterLayout filter_layout = 4;</code>
     */
    stream_executor.dnn.Dnn.FilterLayout getFilterLayout();

    stream_executor.dnn.Dnn.TensorDescriptorProto.LayoutOneofCase getLayoutOneofCase();
  }
  /**
   * <pre>
   * Generic tensor representation.
   * </pre>
   *
   * Protobuf type {@code stream_executor.dnn.TensorDescriptorProto}
   */
  public  static final class TensorDescriptorProto extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:stream_executor.dnn.TensorDescriptorProto)
      TensorDescriptorProtoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TensorDescriptorProto.newBuilder() to construct.
    private TensorDescriptorProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TensorDescriptorProto() {
      dimensions_ = java.util.Collections.emptyList();
      dataType_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TensorDescriptorProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                dimensions_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000001;
              }
              dimensions_.add(input.readInt64());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                dimensions_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                dimensions_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              dataType_ = rawValue;
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              layoutOneofCase_ = 3;
              layoutOneof_ = rawValue;
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              layoutOneofCase_ = 4;
              layoutOneof_ = rawValue;
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          dimensions_ = java.util.Collections.unmodifiableList(dimensions_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_TensorDescriptorProto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_TensorDescriptorProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              stream_executor.dnn.Dnn.TensorDescriptorProto.class, stream_executor.dnn.Dnn.TensorDescriptorProto.Builder.class);
    }

    private int bitField0_;
    private int layoutOneofCase_ = 0;
    private java.lang.Object layoutOneof_;
    public enum LayoutOneofCase
        implements com.google.protobuf.Internal.EnumLite {
      DATA_LAYOUT(3),
      FILTER_LAYOUT(4),
      LAYOUTONEOF_NOT_SET(0);
      private final int value;
      LayoutOneofCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static LayoutOneofCase valueOf(int value) {
        return forNumber(value);
      }

      public static LayoutOneofCase forNumber(int value) {
        switch (value) {
          case 3: return DATA_LAYOUT;
          case 4: return FILTER_LAYOUT;
          case 0: return LAYOUTONEOF_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    }

    public LayoutOneofCase
    getLayoutOneofCase() {
      return LayoutOneofCase.forNumber(
          layoutOneofCase_);
    }

    public static final int DIMENSIONS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Long> dimensions_;
    /**
     * <code>repeated int64 dimensions = 1;</code>
     */
    public java.util.List<java.lang.Long>
        getDimensionsList() {
      return dimensions_;
    }
    /**
     * <code>repeated int64 dimensions = 1;</code>
     */
    public int getDimensionsCount() {
      return dimensions_.size();
    }
    /**
     * <code>repeated int64 dimensions = 1;</code>
     */
    public long getDimensions(int index) {
      return dimensions_.get(index);
    }
    private int dimensionsMemoizedSerializedSize = -1;

    public static final int DATA_TYPE_FIELD_NUMBER = 2;
    private int dataType_;
    /**
     * <code>.stream_executor.dnn.DataType data_type = 2;</code>
     */
    public int getDataTypeValue() {
      return dataType_;
    }
    /**
     * <code>.stream_executor.dnn.DataType data_type = 2;</code>
     */
    public stream_executor.dnn.Dnn.DataType getDataType() {
      @SuppressWarnings("deprecation")
      stream_executor.dnn.Dnn.DataType result = stream_executor.dnn.Dnn.DataType.valueOf(dataType_);
      return result == null ? stream_executor.dnn.Dnn.DataType.UNRECOGNIZED : result;
    }

    public static final int DATA_LAYOUT_FIELD_NUMBER = 3;
    /**
     * <code>.stream_executor.dnn.DataLayout data_layout = 3;</code>
     */
    public int getDataLayoutValue() {
      if (layoutOneofCase_ == 3) {
        return (java.lang.Integer) layoutOneof_;
      }
      return 0;
    }
    /**
     * <code>.stream_executor.dnn.DataLayout data_layout = 3;</code>
     */
    public stream_executor.dnn.Dnn.DataLayout getDataLayout() {
      if (layoutOneofCase_ == 3) {
        @SuppressWarnings("deprecation")
        stream_executor.dnn.Dnn.DataLayout result = stream_executor.dnn.Dnn.DataLayout.valueOf(
            (java.lang.Integer) layoutOneof_);
        return result == null ? stream_executor.dnn.Dnn.DataLayout.UNRECOGNIZED : result;
      }
      return stream_executor.dnn.Dnn.DataLayout.kYXDepthBatch;
    }

    public static final int FILTER_LAYOUT_FIELD_NUMBER = 4;
    /**
     * <code>.stream_executor.dnn.FilterLayout filter_layout = 4;</code>
     */
    public int getFilterLayoutValue() {
      if (layoutOneofCase_ == 4) {
        return (java.lang.Integer) layoutOneof_;
      }
      return 0;
    }
    /**
     * <code>.stream_executor.dnn.FilterLayout filter_layout = 4;</code>
     */
    public stream_executor.dnn.Dnn.FilterLayout getFilterLayout() {
      if (layoutOneofCase_ == 4) {
        @SuppressWarnings("deprecation")
        stream_executor.dnn.Dnn.FilterLayout result = stream_executor.dnn.Dnn.FilterLayout.valueOf(
            (java.lang.Integer) layoutOneof_);
        return result == null ? stream_executor.dnn.Dnn.FilterLayout.UNRECOGNIZED : result;
      }
      return stream_executor.dnn.Dnn.FilterLayout.kOutputInputYX;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getDimensionsList().size() > 0) {
        output.writeUInt32NoTag(10);
        output.writeUInt32NoTag(dimensionsMemoizedSerializedSize);
      }
      for (int i = 0; i < dimensions_.size(); i++) {
        output.writeInt64NoTag(dimensions_.get(i));
      }
      if (dataType_ != stream_executor.dnn.Dnn.DataType.kFloat.getNumber()) {
        output.writeEnum(2, dataType_);
      }
      if (layoutOneofCase_ == 3) {
        output.writeEnum(3, ((java.lang.Integer) layoutOneof_));
      }
      if (layoutOneofCase_ == 4) {
        output.writeEnum(4, ((java.lang.Integer) layoutOneof_));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < dimensions_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(dimensions_.get(i));
        }
        size += dataSize;
        if (!getDimensionsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        dimensionsMemoizedSerializedSize = dataSize;
      }
      if (dataType_ != stream_executor.dnn.Dnn.DataType.kFloat.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, dataType_);
      }
      if (layoutOneofCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, ((java.lang.Integer) layoutOneof_));
      }
      if (layoutOneofCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, ((java.lang.Integer) layoutOneof_));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof stream_executor.dnn.Dnn.TensorDescriptorProto)) {
        return super.equals(obj);
      }
      stream_executor.dnn.Dnn.TensorDescriptorProto other = (stream_executor.dnn.Dnn.TensorDescriptorProto) obj;

      boolean result = true;
      result = result && getDimensionsList()
          .equals(other.getDimensionsList());
      result = result && dataType_ == other.dataType_;
      result = result && getLayoutOneofCase().equals(
          other.getLayoutOneofCase());
      if (!result) return false;
      switch (layoutOneofCase_) {
        case 3:
          result = result && getDataLayoutValue()
              == other.getDataLayoutValue();
          break;
        case 4:
          result = result && getFilterLayoutValue()
              == other.getFilterLayoutValue();
          break;
        case 0:
        default:
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDimensionsCount() > 0) {
        hash = (37 * hash) + DIMENSIONS_FIELD_NUMBER;
        hash = (53 * hash) + getDimensionsList().hashCode();
      }
      hash = (37 * hash) + DATA_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + dataType_;
      switch (layoutOneofCase_) {
        case 3:
          hash = (37 * hash) + DATA_LAYOUT_FIELD_NUMBER;
          hash = (53 * hash) + getDataLayoutValue();
          break;
        case 4:
          hash = (37 * hash) + FILTER_LAYOUT_FIELD_NUMBER;
          hash = (53 * hash) + getFilterLayoutValue();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.TensorDescriptorProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(stream_executor.dnn.Dnn.TensorDescriptorProto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Generic tensor representation.
     * </pre>
     *
     * Protobuf type {@code stream_executor.dnn.TensorDescriptorProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:stream_executor.dnn.TensorDescriptorProto)
        stream_executor.dnn.Dnn.TensorDescriptorProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_TensorDescriptorProto_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_TensorDescriptorProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                stream_executor.dnn.Dnn.TensorDescriptorProto.class, stream_executor.dnn.Dnn.TensorDescriptorProto.Builder.class);
      }

      // Construct using stream_executor.dnn.Dnn.TensorDescriptorProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        dimensions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        dataType_ = 0;

        layoutOneofCase_ = 0;
        layoutOneof_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_TensorDescriptorProto_descriptor;
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.TensorDescriptorProto getDefaultInstanceForType() {
        return stream_executor.dnn.Dnn.TensorDescriptorProto.getDefaultInstance();
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.TensorDescriptorProto build() {
        stream_executor.dnn.Dnn.TensorDescriptorProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.TensorDescriptorProto buildPartial() {
        stream_executor.dnn.Dnn.TensorDescriptorProto result = new stream_executor.dnn.Dnn.TensorDescriptorProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          dimensions_ = java.util.Collections.unmodifiableList(dimensions_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.dimensions_ = dimensions_;
        result.dataType_ = dataType_;
        if (layoutOneofCase_ == 3) {
          result.layoutOneof_ = layoutOneof_;
        }
        if (layoutOneofCase_ == 4) {
          result.layoutOneof_ = layoutOneof_;
        }
        result.bitField0_ = to_bitField0_;
        result.layoutOneofCase_ = layoutOneofCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof stream_executor.dnn.Dnn.TensorDescriptorProto) {
          return mergeFrom((stream_executor.dnn.Dnn.TensorDescriptorProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(stream_executor.dnn.Dnn.TensorDescriptorProto other) {
        if (other == stream_executor.dnn.Dnn.TensorDescriptorProto.getDefaultInstance()) return this;
        if (!other.dimensions_.isEmpty()) {
          if (dimensions_.isEmpty()) {
            dimensions_ = other.dimensions_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDimensionsIsMutable();
            dimensions_.addAll(other.dimensions_);
          }
          onChanged();
        }
        if (other.dataType_ != 0) {
          setDataTypeValue(other.getDataTypeValue());
        }
        switch (other.getLayoutOneofCase()) {
          case DATA_LAYOUT: {
            setDataLayoutValue(other.getDataLayoutValue());
            break;
          }
          case FILTER_LAYOUT: {
            setFilterLayoutValue(other.getFilterLayoutValue());
            break;
          }
          case LAYOUTONEOF_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        stream_executor.dnn.Dnn.TensorDescriptorProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (stream_executor.dnn.Dnn.TensorDescriptorProto) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int layoutOneofCase_ = 0;
      private java.lang.Object layoutOneof_;
      public LayoutOneofCase
          getLayoutOneofCase() {
        return LayoutOneofCase.forNumber(
            layoutOneofCase_);
      }

      public Builder clearLayoutOneof() {
        layoutOneofCase_ = 0;
        layoutOneof_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private java.util.List<java.lang.Long> dimensions_ = java.util.Collections.emptyList();
      private void ensureDimensionsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          dimensions_ = new java.util.ArrayList<java.lang.Long>(dimensions_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int64 dimensions = 1;</code>
       */
      public java.util.List<java.lang.Long>
          getDimensionsList() {
        return java.util.Collections.unmodifiableList(dimensions_);
      }
      /**
       * <code>repeated int64 dimensions = 1;</code>
       */
      public int getDimensionsCount() {
        return dimensions_.size();
      }
      /**
       * <code>repeated int64 dimensions = 1;</code>
       */
      public long getDimensions(int index) {
        return dimensions_.get(index);
      }
      /**
       * <code>repeated int64 dimensions = 1;</code>
       */
      public Builder setDimensions(
          int index, long value) {
        ensureDimensionsIsMutable();
        dimensions_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dimensions = 1;</code>
       */
      public Builder addDimensions(long value) {
        ensureDimensionsIsMutable();
        dimensions_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dimensions = 1;</code>
       */
      public Builder addAllDimensions(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureDimensionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, dimensions_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dimensions = 1;</code>
       */
      public Builder clearDimensions() {
        dimensions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private int dataType_ = 0;
      /**
       * <code>.stream_executor.dnn.DataType data_type = 2;</code>
       */
      public int getDataTypeValue() {
        return dataType_;
      }
      /**
       * <code>.stream_executor.dnn.DataType data_type = 2;</code>
       */
      public Builder setDataTypeValue(int value) {
        dataType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.DataType data_type = 2;</code>
       */
      public stream_executor.dnn.Dnn.DataType getDataType() {
        @SuppressWarnings("deprecation")
        stream_executor.dnn.Dnn.DataType result = stream_executor.dnn.Dnn.DataType.valueOf(dataType_);
        return result == null ? stream_executor.dnn.Dnn.DataType.UNRECOGNIZED : result;
      }
      /**
       * <code>.stream_executor.dnn.DataType data_type = 2;</code>
       */
      public Builder setDataType(stream_executor.dnn.Dnn.DataType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        dataType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.DataType data_type = 2;</code>
       */
      public Builder clearDataType() {
        
        dataType_ = 0;
        onChanged();
        return this;
      }

      /**
       * <code>.stream_executor.dnn.DataLayout data_layout = 3;</code>
       */
      public int getDataLayoutValue() {
        if (layoutOneofCase_ == 3) {
          return ((java.lang.Integer) layoutOneof_).intValue();
        }
        return 0;
      }
      /**
       * <code>.stream_executor.dnn.DataLayout data_layout = 3;</code>
       */
      public Builder setDataLayoutValue(int value) {
        layoutOneofCase_ = 3;
        layoutOneof_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.DataLayout data_layout = 3;</code>
       */
      public stream_executor.dnn.Dnn.DataLayout getDataLayout() {
        if (layoutOneofCase_ == 3) {
          @SuppressWarnings("deprecation")
          stream_executor.dnn.Dnn.DataLayout result = stream_executor.dnn.Dnn.DataLayout.valueOf(
              (java.lang.Integer) layoutOneof_);
          return result == null ? stream_executor.dnn.Dnn.DataLayout.UNRECOGNIZED : result;
        }
        return stream_executor.dnn.Dnn.DataLayout.kYXDepthBatch;
      }
      /**
       * <code>.stream_executor.dnn.DataLayout data_layout = 3;</code>
       */
      public Builder setDataLayout(stream_executor.dnn.Dnn.DataLayout value) {
        if (value == null) {
          throw new NullPointerException();
        }
        layoutOneofCase_ = 3;
        layoutOneof_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.DataLayout data_layout = 3;</code>
       */
      public Builder clearDataLayout() {
        if (layoutOneofCase_ == 3) {
          layoutOneofCase_ = 0;
          layoutOneof_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>.stream_executor.dnn.FilterLayout filter_layout = 4;</code>
       */
      public int getFilterLayoutValue() {
        if (layoutOneofCase_ == 4) {
          return ((java.lang.Integer) layoutOneof_).intValue();
        }
        return 0;
      }
      /**
       * <code>.stream_executor.dnn.FilterLayout filter_layout = 4;</code>
       */
      public Builder setFilterLayoutValue(int value) {
        layoutOneofCase_ = 4;
        layoutOneof_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.FilterLayout filter_layout = 4;</code>
       */
      public stream_executor.dnn.Dnn.FilterLayout getFilterLayout() {
        if (layoutOneofCase_ == 4) {
          @SuppressWarnings("deprecation")
          stream_executor.dnn.Dnn.FilterLayout result = stream_executor.dnn.Dnn.FilterLayout.valueOf(
              (java.lang.Integer) layoutOneof_);
          return result == null ? stream_executor.dnn.Dnn.FilterLayout.UNRECOGNIZED : result;
        }
        return stream_executor.dnn.Dnn.FilterLayout.kOutputInputYX;
      }
      /**
       * <code>.stream_executor.dnn.FilterLayout filter_layout = 4;</code>
       */
      public Builder setFilterLayout(stream_executor.dnn.Dnn.FilterLayout value) {
        if (value == null) {
          throw new NullPointerException();
        }
        layoutOneofCase_ = 4;
        layoutOneof_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.FilterLayout filter_layout = 4;</code>
       */
      public Builder clearFilterLayout() {
        if (layoutOneofCase_ == 4) {
          layoutOneofCase_ = 0;
          layoutOneof_ = null;
          onChanged();
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:stream_executor.dnn.TensorDescriptorProto)
    }

    // @@protoc_insertion_point(class_scope:stream_executor.dnn.TensorDescriptorProto)
    private static final stream_executor.dnn.Dnn.TensorDescriptorProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new stream_executor.dnn.Dnn.TensorDescriptorProto();
    }

    public static stream_executor.dnn.Dnn.TensorDescriptorProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TensorDescriptorProto>
        PARSER = new com.google.protobuf.AbstractParser<TensorDescriptorProto>() {
      @java.lang.Override
      public TensorDescriptorProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TensorDescriptorProto(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TensorDescriptorProto> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TensorDescriptorProto> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public stream_executor.dnn.Dnn.TensorDescriptorProto getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AlgorithmProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:stream_executor.dnn.AlgorithmProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int64 algo_id = 1;</code>
     */
    long getAlgoId();

    /**
     * <code>.stream_executor.dnn.AlgorithmProto.MathType math_type = 2;</code>
     */
    int getMathTypeValue();
    /**
     * <code>.stream_executor.dnn.AlgorithmProto.MathType math_type = 2;</code>
     */
    stream_executor.dnn.Dnn.AlgorithmProto.MathType getMathType();
  }
  /**
   * <pre>
   * Generic algorithm representation.
   * </pre>
   *
   * Protobuf type {@code stream_executor.dnn.AlgorithmProto}
   */
  public  static final class AlgorithmProto extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:stream_executor.dnn.AlgorithmProto)
      AlgorithmProtoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use AlgorithmProto.newBuilder() to construct.
    private AlgorithmProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AlgorithmProto() {
      algoId_ = 0L;
      mathType_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private AlgorithmProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              algoId_ = input.readInt64();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              mathType_ = rawValue;
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_AlgorithmProto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_AlgorithmProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              stream_executor.dnn.Dnn.AlgorithmProto.class, stream_executor.dnn.Dnn.AlgorithmProto.Builder.class);
    }

    /**
     * Protobuf enum {@code stream_executor.dnn.AlgorithmProto.MathType}
     */
    public enum MathType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DEFAULT_MATH = 0;</code>
       */
      DEFAULT_MATH(0),
      /**
       * <pre>
       * The GPU may operate 4x4 matrix FMA.
       * See cuDNN's documentation for CUDNN_TENSOR_OP_MATH.
       * </pre>
       *
       * <code>TENSOR_OP_MATH = 1;</code>
       */
      TENSOR_OP_MATH(1),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>DEFAULT_MATH = 0;</code>
       */
      public static final int DEFAULT_MATH_VALUE = 0;
      /**
       * <pre>
       * The GPU may operate 4x4 matrix FMA.
       * See cuDNN's documentation for CUDNN_TENSOR_OP_MATH.
       * </pre>
       *
       * <code>TENSOR_OP_MATH = 1;</code>
       */
      public static final int TENSOR_OP_MATH_VALUE = 1;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MathType valueOf(int value) {
        return forNumber(value);
      }

      public static MathType forNumber(int value) {
        switch (value) {
          case 0: return DEFAULT_MATH;
          case 1: return TENSOR_OP_MATH;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<MathType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          MathType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<MathType>() {
              public MathType findValueByNumber(int number) {
                return MathType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return stream_executor.dnn.Dnn.AlgorithmProto.getDescriptor().getEnumTypes().get(0);
      }

      private static final MathType[] VALUES = values();

      public static MathType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      MathType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:stream_executor.dnn.AlgorithmProto.MathType)
    }

    public static final int ALGO_ID_FIELD_NUMBER = 1;
    private long algoId_;
    /**
     * <code>int64 algo_id = 1;</code>
     */
    public long getAlgoId() {
      return algoId_;
    }

    public static final int MATH_TYPE_FIELD_NUMBER = 2;
    private int mathType_;
    /**
     * <code>.stream_executor.dnn.AlgorithmProto.MathType math_type = 2;</code>
     */
    public int getMathTypeValue() {
      return mathType_;
    }
    /**
     * <code>.stream_executor.dnn.AlgorithmProto.MathType math_type = 2;</code>
     */
    public stream_executor.dnn.Dnn.AlgorithmProto.MathType getMathType() {
      @SuppressWarnings("deprecation")
      stream_executor.dnn.Dnn.AlgorithmProto.MathType result = stream_executor.dnn.Dnn.AlgorithmProto.MathType.valueOf(mathType_);
      return result == null ? stream_executor.dnn.Dnn.AlgorithmProto.MathType.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (algoId_ != 0L) {
        output.writeInt64(1, algoId_);
      }
      if (mathType_ != stream_executor.dnn.Dnn.AlgorithmProto.MathType.DEFAULT_MATH.getNumber()) {
        output.writeEnum(2, mathType_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (algoId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, algoId_);
      }
      if (mathType_ != stream_executor.dnn.Dnn.AlgorithmProto.MathType.DEFAULT_MATH.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, mathType_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof stream_executor.dnn.Dnn.AlgorithmProto)) {
        return super.equals(obj);
      }
      stream_executor.dnn.Dnn.AlgorithmProto other = (stream_executor.dnn.Dnn.AlgorithmProto) obj;

      boolean result = true;
      result = result && (getAlgoId()
          == other.getAlgoId());
      result = result && mathType_ == other.mathType_;
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ALGO_ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getAlgoId());
      hash = (37 * hash) + MATH_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + mathType_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static stream_executor.dnn.Dnn.AlgorithmProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.AlgorithmProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.AlgorithmProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.AlgorithmProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.AlgorithmProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.AlgorithmProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.AlgorithmProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.AlgorithmProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.AlgorithmProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.AlgorithmProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.AlgorithmProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.AlgorithmProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(stream_executor.dnn.Dnn.AlgorithmProto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Generic algorithm representation.
     * </pre>
     *
     * Protobuf type {@code stream_executor.dnn.AlgorithmProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:stream_executor.dnn.AlgorithmProto)
        stream_executor.dnn.Dnn.AlgorithmProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_AlgorithmProto_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_AlgorithmProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                stream_executor.dnn.Dnn.AlgorithmProto.class, stream_executor.dnn.Dnn.AlgorithmProto.Builder.class);
      }

      // Construct using stream_executor.dnn.Dnn.AlgorithmProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        algoId_ = 0L;

        mathType_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_AlgorithmProto_descriptor;
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.AlgorithmProto getDefaultInstanceForType() {
        return stream_executor.dnn.Dnn.AlgorithmProto.getDefaultInstance();
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.AlgorithmProto build() {
        stream_executor.dnn.Dnn.AlgorithmProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.AlgorithmProto buildPartial() {
        stream_executor.dnn.Dnn.AlgorithmProto result = new stream_executor.dnn.Dnn.AlgorithmProto(this);
        result.algoId_ = algoId_;
        result.mathType_ = mathType_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof stream_executor.dnn.Dnn.AlgorithmProto) {
          return mergeFrom((stream_executor.dnn.Dnn.AlgorithmProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(stream_executor.dnn.Dnn.AlgorithmProto other) {
        if (other == stream_executor.dnn.Dnn.AlgorithmProto.getDefaultInstance()) return this;
        if (other.getAlgoId() != 0L) {
          setAlgoId(other.getAlgoId());
        }
        if (other.mathType_ != 0) {
          setMathTypeValue(other.getMathTypeValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        stream_executor.dnn.Dnn.AlgorithmProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (stream_executor.dnn.Dnn.AlgorithmProto) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long algoId_ ;
      /**
       * <code>int64 algo_id = 1;</code>
       */
      public long getAlgoId() {
        return algoId_;
      }
      /**
       * <code>int64 algo_id = 1;</code>
       */
      public Builder setAlgoId(long value) {
        
        algoId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 algo_id = 1;</code>
       */
      public Builder clearAlgoId() {
        
        algoId_ = 0L;
        onChanged();
        return this;
      }

      private int mathType_ = 0;
      /**
       * <code>.stream_executor.dnn.AlgorithmProto.MathType math_type = 2;</code>
       */
      public int getMathTypeValue() {
        return mathType_;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto.MathType math_type = 2;</code>
       */
      public Builder setMathTypeValue(int value) {
        mathType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto.MathType math_type = 2;</code>
       */
      public stream_executor.dnn.Dnn.AlgorithmProto.MathType getMathType() {
        @SuppressWarnings("deprecation")
        stream_executor.dnn.Dnn.AlgorithmProto.MathType result = stream_executor.dnn.Dnn.AlgorithmProto.MathType.valueOf(mathType_);
        return result == null ? stream_executor.dnn.Dnn.AlgorithmProto.MathType.UNRECOGNIZED : result;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto.MathType math_type = 2;</code>
       */
      public Builder setMathType(stream_executor.dnn.Dnn.AlgorithmProto.MathType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        mathType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto.MathType math_type = 2;</code>
       */
      public Builder clearMathType() {
        
        mathType_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:stream_executor.dnn.AlgorithmProto)
    }

    // @@protoc_insertion_point(class_scope:stream_executor.dnn.AlgorithmProto)
    private static final stream_executor.dnn.Dnn.AlgorithmProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new stream_executor.dnn.Dnn.AlgorithmProto();
    }

    public static stream_executor.dnn.Dnn.AlgorithmProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AlgorithmProto>
        PARSER = new com.google.protobuf.AbstractParser<AlgorithmProto>() {
      @java.lang.Override
      public AlgorithmProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AlgorithmProto(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<AlgorithmProto> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AlgorithmProto> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public stream_executor.dnn.Dnn.AlgorithmProto getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ConvolutionDescriptorProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:stream_executor.dnn.ConvolutionDescriptorProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated int64 paddings = 1;</code>
     */
    java.util.List<java.lang.Long> getPaddingsList();
    /**
     * <code>repeated int64 paddings = 1;</code>
     */
    int getPaddingsCount();
    /**
     * <code>repeated int64 paddings = 1;</code>
     */
    long getPaddings(int index);

    /**
     * <code>repeated int64 strides = 2;</code>
     */
    java.util.List<java.lang.Long> getStridesList();
    /**
     * <code>repeated int64 strides = 2;</code>
     */
    int getStridesCount();
    /**
     * <code>repeated int64 strides = 2;</code>
     */
    long getStrides(int index);

    /**
     * <code>repeated int64 dilations = 3;</code>
     */
    java.util.List<java.lang.Long> getDilationsList();
    /**
     * <code>repeated int64 dilations = 3;</code>
     */
    int getDilationsCount();
    /**
     * <code>repeated int64 dilations = 3;</code>
     */
    long getDilations(int index);

    /**
     * <pre>
     * The "accumulator" type. For example, use F32 as an accumulator for F16
     * convolutions.
     * See cuDNN's cudnnConvolutionMode_t.
     * </pre>
     *
     * <code>.stream_executor.dnn.DataType compute_mode = 4;</code>
     */
    int getComputeModeValue();
    /**
     * <pre>
     * The "accumulator" type. For example, use F32 as an accumulator for F16
     * convolutions.
     * See cuDNN's cudnnConvolutionMode_t.
     * </pre>
     *
     * <code>.stream_executor.dnn.DataType compute_mode = 4;</code>
     */
    stream_executor.dnn.Dnn.DataType getComputeMode();

    /**
     * <pre>
     * See cuDNN's group count.
     * </pre>
     *
     * <code>int32 group_count = 5;</code>
     */
    int getGroupCount();

    /**
     * <code>.stream_executor.dnn.ConvolutionMode convolution_mode = 6;</code>
     */
    int getConvolutionModeValue();
    /**
     * <code>.stream_executor.dnn.ConvolutionMode convolution_mode = 6;</code>
     */
    stream_executor.dnn.Dnn.ConvolutionMode getConvolutionMode();
  }
  /**
   * <pre>
   * Convolution-specific parameters.
   * </pre>
   *
   * Protobuf type {@code stream_executor.dnn.ConvolutionDescriptorProto}
   */
  public  static final class ConvolutionDescriptorProto extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:stream_executor.dnn.ConvolutionDescriptorProto)
      ConvolutionDescriptorProtoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ConvolutionDescriptorProto.newBuilder() to construct.
    private ConvolutionDescriptorProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ConvolutionDescriptorProto() {
      paddings_ = java.util.Collections.emptyList();
      strides_ = java.util.Collections.emptyList();
      dilations_ = java.util.Collections.emptyList();
      computeMode_ = 0;
      groupCount_ = 0;
      convolutionMode_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ConvolutionDescriptorProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                paddings_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000001;
              }
              paddings_.add(input.readInt64());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                paddings_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                paddings_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                strides_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000002;
              }
              strides_.add(input.readInt64());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                strides_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                strides_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                dilations_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000004;
              }
              dilations_.add(input.readInt64());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                dilations_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                dilations_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              int rawValue = input.readEnum();

              computeMode_ = rawValue;
              break;
            }
            case 40: {

              groupCount_ = input.readInt32();
              break;
            }
            case 48: {
              int rawValue = input.readEnum();

              convolutionMode_ = rawValue;
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          paddings_ = java.util.Collections.unmodifiableList(paddings_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          strides_ = java.util.Collections.unmodifiableList(strides_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          dilations_ = java.util.Collections.unmodifiableList(dilations_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_ConvolutionDescriptorProto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_ConvolutionDescriptorProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              stream_executor.dnn.Dnn.ConvolutionDescriptorProto.class, stream_executor.dnn.Dnn.ConvolutionDescriptorProto.Builder.class);
    }

    private int bitField0_;
    public static final int PADDINGS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Long> paddings_;
    /**
     * <code>repeated int64 paddings = 1;</code>
     */
    public java.util.List<java.lang.Long>
        getPaddingsList() {
      return paddings_;
    }
    /**
     * <code>repeated int64 paddings = 1;</code>
     */
    public int getPaddingsCount() {
      return paddings_.size();
    }
    /**
     * <code>repeated int64 paddings = 1;</code>
     */
    public long getPaddings(int index) {
      return paddings_.get(index);
    }
    private int paddingsMemoizedSerializedSize = -1;

    public static final int STRIDES_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Long> strides_;
    /**
     * <code>repeated int64 strides = 2;</code>
     */
    public java.util.List<java.lang.Long>
        getStridesList() {
      return strides_;
    }
    /**
     * <code>repeated int64 strides = 2;</code>
     */
    public int getStridesCount() {
      return strides_.size();
    }
    /**
     * <code>repeated int64 strides = 2;</code>
     */
    public long getStrides(int index) {
      return strides_.get(index);
    }
    private int stridesMemoizedSerializedSize = -1;

    public static final int DILATIONS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Long> dilations_;
    /**
     * <code>repeated int64 dilations = 3;</code>
     */
    public java.util.List<java.lang.Long>
        getDilationsList() {
      return dilations_;
    }
    /**
     * <code>repeated int64 dilations = 3;</code>
     */
    public int getDilationsCount() {
      return dilations_.size();
    }
    /**
     * <code>repeated int64 dilations = 3;</code>
     */
    public long getDilations(int index) {
      return dilations_.get(index);
    }
    private int dilationsMemoizedSerializedSize = -1;

    public static final int COMPUTE_MODE_FIELD_NUMBER = 4;
    private int computeMode_;
    /**
     * <pre>
     * The "accumulator" type. For example, use F32 as an accumulator for F16
     * convolutions.
     * See cuDNN's cudnnConvolutionMode_t.
     * </pre>
     *
     * <code>.stream_executor.dnn.DataType compute_mode = 4;</code>
     */
    public int getComputeModeValue() {
      return computeMode_;
    }
    /**
     * <pre>
     * The "accumulator" type. For example, use F32 as an accumulator for F16
     * convolutions.
     * See cuDNN's cudnnConvolutionMode_t.
     * </pre>
     *
     * <code>.stream_executor.dnn.DataType compute_mode = 4;</code>
     */
    public stream_executor.dnn.Dnn.DataType getComputeMode() {
      @SuppressWarnings("deprecation")
      stream_executor.dnn.Dnn.DataType result = stream_executor.dnn.Dnn.DataType.valueOf(computeMode_);
      return result == null ? stream_executor.dnn.Dnn.DataType.UNRECOGNIZED : result;
    }

    public static final int GROUP_COUNT_FIELD_NUMBER = 5;
    private int groupCount_;
    /**
     * <pre>
     * See cuDNN's group count.
     * </pre>
     *
     * <code>int32 group_count = 5;</code>
     */
    public int getGroupCount() {
      return groupCount_;
    }

    public static final int CONVOLUTION_MODE_FIELD_NUMBER = 6;
    private int convolutionMode_;
    /**
     * <code>.stream_executor.dnn.ConvolutionMode convolution_mode = 6;</code>
     */
    public int getConvolutionModeValue() {
      return convolutionMode_;
    }
    /**
     * <code>.stream_executor.dnn.ConvolutionMode convolution_mode = 6;</code>
     */
    public stream_executor.dnn.Dnn.ConvolutionMode getConvolutionMode() {
      @SuppressWarnings("deprecation")
      stream_executor.dnn.Dnn.ConvolutionMode result = stream_executor.dnn.Dnn.ConvolutionMode.valueOf(convolutionMode_);
      return result == null ? stream_executor.dnn.Dnn.ConvolutionMode.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getPaddingsList().size() > 0) {
        output.writeUInt32NoTag(10);
        output.writeUInt32NoTag(paddingsMemoizedSerializedSize);
      }
      for (int i = 0; i < paddings_.size(); i++) {
        output.writeInt64NoTag(paddings_.get(i));
      }
      if (getStridesList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(stridesMemoizedSerializedSize);
      }
      for (int i = 0; i < strides_.size(); i++) {
        output.writeInt64NoTag(strides_.get(i));
      }
      if (getDilationsList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(dilationsMemoizedSerializedSize);
      }
      for (int i = 0; i < dilations_.size(); i++) {
        output.writeInt64NoTag(dilations_.get(i));
      }
      if (computeMode_ != stream_executor.dnn.Dnn.DataType.kFloat.getNumber()) {
        output.writeEnum(4, computeMode_);
      }
      if (groupCount_ != 0) {
        output.writeInt32(5, groupCount_);
      }
      if (convolutionMode_ != stream_executor.dnn.Dnn.ConvolutionMode.CROSS_CORRELATION.getNumber()) {
        output.writeEnum(6, convolutionMode_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < paddings_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(paddings_.get(i));
        }
        size += dataSize;
        if (!getPaddingsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        paddingsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < strides_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(strides_.get(i));
        }
        size += dataSize;
        if (!getStridesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        stridesMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < dilations_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(dilations_.get(i));
        }
        size += dataSize;
        if (!getDilationsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        dilationsMemoizedSerializedSize = dataSize;
      }
      if (computeMode_ != stream_executor.dnn.Dnn.DataType.kFloat.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, computeMode_);
      }
      if (groupCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, groupCount_);
      }
      if (convolutionMode_ != stream_executor.dnn.Dnn.ConvolutionMode.CROSS_CORRELATION.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, convolutionMode_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof stream_executor.dnn.Dnn.ConvolutionDescriptorProto)) {
        return super.equals(obj);
      }
      stream_executor.dnn.Dnn.ConvolutionDescriptorProto other = (stream_executor.dnn.Dnn.ConvolutionDescriptorProto) obj;

      boolean result = true;
      result = result && getPaddingsList()
          .equals(other.getPaddingsList());
      result = result && getStridesList()
          .equals(other.getStridesList());
      result = result && getDilationsList()
          .equals(other.getDilationsList());
      result = result && computeMode_ == other.computeMode_;
      result = result && (getGroupCount()
          == other.getGroupCount());
      result = result && convolutionMode_ == other.convolutionMode_;
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getPaddingsCount() > 0) {
        hash = (37 * hash) + PADDINGS_FIELD_NUMBER;
        hash = (53 * hash) + getPaddingsList().hashCode();
      }
      if (getStridesCount() > 0) {
        hash = (37 * hash) + STRIDES_FIELD_NUMBER;
        hash = (53 * hash) + getStridesList().hashCode();
      }
      if (getDilationsCount() > 0) {
        hash = (37 * hash) + DILATIONS_FIELD_NUMBER;
        hash = (53 * hash) + getDilationsList().hashCode();
      }
      hash = (37 * hash) + COMPUTE_MODE_FIELD_NUMBER;
      hash = (53 * hash) + computeMode_;
      hash = (37 * hash) + GROUP_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getGroupCount();
      hash = (37 * hash) + CONVOLUTION_MODE_FIELD_NUMBER;
      hash = (53 * hash) + convolutionMode_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(stream_executor.dnn.Dnn.ConvolutionDescriptorProto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Convolution-specific parameters.
     * </pre>
     *
     * Protobuf type {@code stream_executor.dnn.ConvolutionDescriptorProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:stream_executor.dnn.ConvolutionDescriptorProto)
        stream_executor.dnn.Dnn.ConvolutionDescriptorProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_ConvolutionDescriptorProto_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_ConvolutionDescriptorProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                stream_executor.dnn.Dnn.ConvolutionDescriptorProto.class, stream_executor.dnn.Dnn.ConvolutionDescriptorProto.Builder.class);
      }

      // Construct using stream_executor.dnn.Dnn.ConvolutionDescriptorProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        paddings_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        strides_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        dilations_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        computeMode_ = 0;

        groupCount_ = 0;

        convolutionMode_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_ConvolutionDescriptorProto_descriptor;
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.ConvolutionDescriptorProto getDefaultInstanceForType() {
        return stream_executor.dnn.Dnn.ConvolutionDescriptorProto.getDefaultInstance();
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.ConvolutionDescriptorProto build() {
        stream_executor.dnn.Dnn.ConvolutionDescriptorProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.ConvolutionDescriptorProto buildPartial() {
        stream_executor.dnn.Dnn.ConvolutionDescriptorProto result = new stream_executor.dnn.Dnn.ConvolutionDescriptorProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          paddings_ = java.util.Collections.unmodifiableList(paddings_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.paddings_ = paddings_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          strides_ = java.util.Collections.unmodifiableList(strides_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.strides_ = strides_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          dilations_ = java.util.Collections.unmodifiableList(dilations_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.dilations_ = dilations_;
        result.computeMode_ = computeMode_;
        result.groupCount_ = groupCount_;
        result.convolutionMode_ = convolutionMode_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof stream_executor.dnn.Dnn.ConvolutionDescriptorProto) {
          return mergeFrom((stream_executor.dnn.Dnn.ConvolutionDescriptorProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(stream_executor.dnn.Dnn.ConvolutionDescriptorProto other) {
        if (other == stream_executor.dnn.Dnn.ConvolutionDescriptorProto.getDefaultInstance()) return this;
        if (!other.paddings_.isEmpty()) {
          if (paddings_.isEmpty()) {
            paddings_ = other.paddings_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensurePaddingsIsMutable();
            paddings_.addAll(other.paddings_);
          }
          onChanged();
        }
        if (!other.strides_.isEmpty()) {
          if (strides_.isEmpty()) {
            strides_ = other.strides_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureStridesIsMutable();
            strides_.addAll(other.strides_);
          }
          onChanged();
        }
        if (!other.dilations_.isEmpty()) {
          if (dilations_.isEmpty()) {
            dilations_ = other.dilations_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureDilationsIsMutable();
            dilations_.addAll(other.dilations_);
          }
          onChanged();
        }
        if (other.computeMode_ != 0) {
          setComputeModeValue(other.getComputeModeValue());
        }
        if (other.getGroupCount() != 0) {
          setGroupCount(other.getGroupCount());
        }
        if (other.convolutionMode_ != 0) {
          setConvolutionModeValue(other.getConvolutionModeValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        stream_executor.dnn.Dnn.ConvolutionDescriptorProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (stream_executor.dnn.Dnn.ConvolutionDescriptorProto) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<java.lang.Long> paddings_ = java.util.Collections.emptyList();
      private void ensurePaddingsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          paddings_ = new java.util.ArrayList<java.lang.Long>(paddings_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int64 paddings = 1;</code>
       */
      public java.util.List<java.lang.Long>
          getPaddingsList() {
        return java.util.Collections.unmodifiableList(paddings_);
      }
      /**
       * <code>repeated int64 paddings = 1;</code>
       */
      public int getPaddingsCount() {
        return paddings_.size();
      }
      /**
       * <code>repeated int64 paddings = 1;</code>
       */
      public long getPaddings(int index) {
        return paddings_.get(index);
      }
      /**
       * <code>repeated int64 paddings = 1;</code>
       */
      public Builder setPaddings(
          int index, long value) {
        ensurePaddingsIsMutable();
        paddings_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 paddings = 1;</code>
       */
      public Builder addPaddings(long value) {
        ensurePaddingsIsMutable();
        paddings_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 paddings = 1;</code>
       */
      public Builder addAllPaddings(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensurePaddingsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, paddings_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 paddings = 1;</code>
       */
      public Builder clearPaddings() {
        paddings_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Long> strides_ = java.util.Collections.emptyList();
      private void ensureStridesIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          strides_ = new java.util.ArrayList<java.lang.Long>(strides_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int64 strides = 2;</code>
       */
      public java.util.List<java.lang.Long>
          getStridesList() {
        return java.util.Collections.unmodifiableList(strides_);
      }
      /**
       * <code>repeated int64 strides = 2;</code>
       */
      public int getStridesCount() {
        return strides_.size();
      }
      /**
       * <code>repeated int64 strides = 2;</code>
       */
      public long getStrides(int index) {
        return strides_.get(index);
      }
      /**
       * <code>repeated int64 strides = 2;</code>
       */
      public Builder setStrides(
          int index, long value) {
        ensureStridesIsMutable();
        strides_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 strides = 2;</code>
       */
      public Builder addStrides(long value) {
        ensureStridesIsMutable();
        strides_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 strides = 2;</code>
       */
      public Builder addAllStrides(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureStridesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, strides_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 strides = 2;</code>
       */
      public Builder clearStrides() {
        strides_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Long> dilations_ = java.util.Collections.emptyList();
      private void ensureDilationsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          dilations_ = new java.util.ArrayList<java.lang.Long>(dilations_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int64 dilations = 3;</code>
       */
      public java.util.List<java.lang.Long>
          getDilationsList() {
        return java.util.Collections.unmodifiableList(dilations_);
      }
      /**
       * <code>repeated int64 dilations = 3;</code>
       */
      public int getDilationsCount() {
        return dilations_.size();
      }
      /**
       * <code>repeated int64 dilations = 3;</code>
       */
      public long getDilations(int index) {
        return dilations_.get(index);
      }
      /**
       * <code>repeated int64 dilations = 3;</code>
       */
      public Builder setDilations(
          int index, long value) {
        ensureDilationsIsMutable();
        dilations_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dilations = 3;</code>
       */
      public Builder addDilations(long value) {
        ensureDilationsIsMutable();
        dilations_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dilations = 3;</code>
       */
      public Builder addAllDilations(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureDilationsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, dilations_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 dilations = 3;</code>
       */
      public Builder clearDilations() {
        dilations_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private int computeMode_ = 0;
      /**
       * <pre>
       * The "accumulator" type. For example, use F32 as an accumulator for F16
       * convolutions.
       * See cuDNN's cudnnConvolutionMode_t.
       * </pre>
       *
       * <code>.stream_executor.dnn.DataType compute_mode = 4;</code>
       */
      public int getComputeModeValue() {
        return computeMode_;
      }
      /**
       * <pre>
       * The "accumulator" type. For example, use F32 as an accumulator for F16
       * convolutions.
       * See cuDNN's cudnnConvolutionMode_t.
       * </pre>
       *
       * <code>.stream_executor.dnn.DataType compute_mode = 4;</code>
       */
      public Builder setComputeModeValue(int value) {
        computeMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The "accumulator" type. For example, use F32 as an accumulator for F16
       * convolutions.
       * See cuDNN's cudnnConvolutionMode_t.
       * </pre>
       *
       * <code>.stream_executor.dnn.DataType compute_mode = 4;</code>
       */
      public stream_executor.dnn.Dnn.DataType getComputeMode() {
        @SuppressWarnings("deprecation")
        stream_executor.dnn.Dnn.DataType result = stream_executor.dnn.Dnn.DataType.valueOf(computeMode_);
        return result == null ? stream_executor.dnn.Dnn.DataType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The "accumulator" type. For example, use F32 as an accumulator for F16
       * convolutions.
       * See cuDNN's cudnnConvolutionMode_t.
       * </pre>
       *
       * <code>.stream_executor.dnn.DataType compute_mode = 4;</code>
       */
      public Builder setComputeMode(stream_executor.dnn.Dnn.DataType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        computeMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The "accumulator" type. For example, use F32 as an accumulator for F16
       * convolutions.
       * See cuDNN's cudnnConvolutionMode_t.
       * </pre>
       *
       * <code>.stream_executor.dnn.DataType compute_mode = 4;</code>
       */
      public Builder clearComputeMode() {
        
        computeMode_ = 0;
        onChanged();
        return this;
      }

      private int groupCount_ ;
      /**
       * <pre>
       * See cuDNN's group count.
       * </pre>
       *
       * <code>int32 group_count = 5;</code>
       */
      public int getGroupCount() {
        return groupCount_;
      }
      /**
       * <pre>
       * See cuDNN's group count.
       * </pre>
       *
       * <code>int32 group_count = 5;</code>
       */
      public Builder setGroupCount(int value) {
        
        groupCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * See cuDNN's group count.
       * </pre>
       *
       * <code>int32 group_count = 5;</code>
       */
      public Builder clearGroupCount() {
        
        groupCount_ = 0;
        onChanged();
        return this;
      }

      private int convolutionMode_ = 0;
      /**
       * <code>.stream_executor.dnn.ConvolutionMode convolution_mode = 6;</code>
       */
      public int getConvolutionModeValue() {
        return convolutionMode_;
      }
      /**
       * <code>.stream_executor.dnn.ConvolutionMode convolution_mode = 6;</code>
       */
      public Builder setConvolutionModeValue(int value) {
        convolutionMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.ConvolutionMode convolution_mode = 6;</code>
       */
      public stream_executor.dnn.Dnn.ConvolutionMode getConvolutionMode() {
        @SuppressWarnings("deprecation")
        stream_executor.dnn.Dnn.ConvolutionMode result = stream_executor.dnn.Dnn.ConvolutionMode.valueOf(convolutionMode_);
        return result == null ? stream_executor.dnn.Dnn.ConvolutionMode.UNRECOGNIZED : result;
      }
      /**
       * <code>.stream_executor.dnn.ConvolutionMode convolution_mode = 6;</code>
       */
      public Builder setConvolutionMode(stream_executor.dnn.Dnn.ConvolutionMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        convolutionMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.ConvolutionMode convolution_mode = 6;</code>
       */
      public Builder clearConvolutionMode() {
        
        convolutionMode_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:stream_executor.dnn.ConvolutionDescriptorProto)
    }

    // @@protoc_insertion_point(class_scope:stream_executor.dnn.ConvolutionDescriptorProto)
    private static final stream_executor.dnn.Dnn.ConvolutionDescriptorProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new stream_executor.dnn.Dnn.ConvolutionDescriptorProto();
    }

    public static stream_executor.dnn.Dnn.ConvolutionDescriptorProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ConvolutionDescriptorProto>
        PARSER = new com.google.protobuf.AbstractParser<ConvolutionDescriptorProto>() {
      @java.lang.Override
      public ConvolutionDescriptorProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ConvolutionDescriptorProto(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ConvolutionDescriptorProto> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ConvolutionDescriptorProto> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public stream_executor.dnn.Dnn.ConvolutionDescriptorProto getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ConvolutionProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:stream_executor.dnn.ConvolutionProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.stream_executor.dnn.ConvolutionKind kind = 1;</code>
     */
    int getKindValue();
    /**
     * <code>.stream_executor.dnn.ConvolutionKind kind = 1;</code>
     */
    stream_executor.dnn.Dnn.ConvolutionKind getKind();

    /**
     * <code>.stream_executor.dnn.TensorDescriptorProto input = 2;</code>
     */
    boolean hasInput();
    /**
     * <code>.stream_executor.dnn.TensorDescriptorProto input = 2;</code>
     */
    stream_executor.dnn.Dnn.TensorDescriptorProto getInput();
    /**
     * <code>.stream_executor.dnn.TensorDescriptorProto input = 2;</code>
     */
    stream_executor.dnn.Dnn.TensorDescriptorProtoOrBuilder getInputOrBuilder();

    /**
     * <code>.stream_executor.dnn.TensorDescriptorProto filter = 3;</code>
     */
    boolean hasFilter();
    /**
     * <code>.stream_executor.dnn.TensorDescriptorProto filter = 3;</code>
     */
    stream_executor.dnn.Dnn.TensorDescriptorProto getFilter();
    /**
     * <code>.stream_executor.dnn.TensorDescriptorProto filter = 3;</code>
     */
    stream_executor.dnn.Dnn.TensorDescriptorProtoOrBuilder getFilterOrBuilder();

    /**
     * <code>.stream_executor.dnn.TensorDescriptorProto output = 4;</code>
     */
    boolean hasOutput();
    /**
     * <code>.stream_executor.dnn.TensorDescriptorProto output = 4;</code>
     */
    stream_executor.dnn.Dnn.TensorDescriptorProto getOutput();
    /**
     * <code>.stream_executor.dnn.TensorDescriptorProto output = 4;</code>
     */
    stream_executor.dnn.Dnn.TensorDescriptorProtoOrBuilder getOutputOrBuilder();

    /**
     * <code>.stream_executor.dnn.AlgorithmProto algorithm = 5;</code>
     */
    boolean hasAlgorithm();
    /**
     * <code>.stream_executor.dnn.AlgorithmProto algorithm = 5;</code>
     */
    stream_executor.dnn.Dnn.AlgorithmProto getAlgorithm();
    /**
     * <code>.stream_executor.dnn.AlgorithmProto algorithm = 5;</code>
     */
    stream_executor.dnn.Dnn.AlgorithmProtoOrBuilder getAlgorithmOrBuilder();

    /**
     * <code>.stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 6;</code>
     */
    boolean hasConvDesc();
    /**
     * <code>.stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 6;</code>
     */
    stream_executor.dnn.Dnn.ConvolutionDescriptorProto getConvDesc();
    /**
     * <code>.stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 6;</code>
     */
    stream_executor.dnn.Dnn.ConvolutionDescriptorProtoOrBuilder getConvDescOrBuilder();

    /**
     * <pre>
     * result = conv_scale * conv(...) + side_value_scale * side_value.
     * side_value is an arbitrary buffer if activation is not none. Otherwise, it
     * has to be the result buffer (using its old values).
     * </pre>
     *
     * <code>double conv_scale = 7;</code>
     */
    double getConvScale();

    /**
     * <code>double side_value_scale = 8;</code>
     */
    double getSideValueScale();

    /**
     * <code>.stream_executor.dnn.ActivationMode activation = 9;</code>
     */
    int getActivationValue();
    /**
     * <code>.stream_executor.dnn.ActivationMode activation = 9;</code>
     */
    stream_executor.dnn.Dnn.ActivationMode getActivation();
  }
  /**
   * <pre>
   * A convolution. Currently it's only used for logging. In the future, we may
   * want to use it in the API as well.
   * </pre>
   *
   * Protobuf type {@code stream_executor.dnn.ConvolutionProto}
   */
  public  static final class ConvolutionProto extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:stream_executor.dnn.ConvolutionProto)
      ConvolutionProtoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ConvolutionProto.newBuilder() to construct.
    private ConvolutionProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ConvolutionProto() {
      kind_ = 0;
      convScale_ = 0D;
      sideValueScale_ = 0D;
      activation_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ConvolutionProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              kind_ = rawValue;
              break;
            }
            case 18: {
              stream_executor.dnn.Dnn.TensorDescriptorProto.Builder subBuilder = null;
              if (input_ != null) {
                subBuilder = input_.toBuilder();
              }
              input_ = input.readMessage(stream_executor.dnn.Dnn.TensorDescriptorProto.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(input_);
                input_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              stream_executor.dnn.Dnn.TensorDescriptorProto.Builder subBuilder = null;
              if (filter_ != null) {
                subBuilder = filter_.toBuilder();
              }
              filter_ = input.readMessage(stream_executor.dnn.Dnn.TensorDescriptorProto.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(filter_);
                filter_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              stream_executor.dnn.Dnn.TensorDescriptorProto.Builder subBuilder = null;
              if (output_ != null) {
                subBuilder = output_.toBuilder();
              }
              output_ = input.readMessage(stream_executor.dnn.Dnn.TensorDescriptorProto.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(output_);
                output_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              stream_executor.dnn.Dnn.AlgorithmProto.Builder subBuilder = null;
              if (algorithm_ != null) {
                subBuilder = algorithm_.toBuilder();
              }
              algorithm_ = input.readMessage(stream_executor.dnn.Dnn.AlgorithmProto.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(algorithm_);
                algorithm_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              stream_executor.dnn.Dnn.ConvolutionDescriptorProto.Builder subBuilder = null;
              if (convDesc_ != null) {
                subBuilder = convDesc_.toBuilder();
              }
              convDesc_ = input.readMessage(stream_executor.dnn.Dnn.ConvolutionDescriptorProto.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(convDesc_);
                convDesc_ = subBuilder.buildPartial();
              }

              break;
            }
            case 57: {

              convScale_ = input.readDouble();
              break;
            }
            case 65: {

              sideValueScale_ = input.readDouble();
              break;
            }
            case 72: {
              int rawValue = input.readEnum();

              activation_ = rawValue;
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_ConvolutionProto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_ConvolutionProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              stream_executor.dnn.Dnn.ConvolutionProto.class, stream_executor.dnn.Dnn.ConvolutionProto.Builder.class);
    }

    public static final int KIND_FIELD_NUMBER = 1;
    private int kind_;
    /**
     * <code>.stream_executor.dnn.ConvolutionKind kind = 1;</code>
     */
    public int getKindValue() {
      return kind_;
    }
    /**
     * <code>.stream_executor.dnn.ConvolutionKind kind = 1;</code>
     */
    public stream_executor.dnn.Dnn.ConvolutionKind getKind() {
      @SuppressWarnings("deprecation")
      stream_executor.dnn.Dnn.ConvolutionKind result = stream_executor.dnn.Dnn.ConvolutionKind.valueOf(kind_);
      return result == null ? stream_executor.dnn.Dnn.ConvolutionKind.UNRECOGNIZED : result;
    }

    public static final int INPUT_FIELD_NUMBER = 2;
    private stream_executor.dnn.Dnn.TensorDescriptorProto input_;
    /**
     * <code>.stream_executor.dnn.TensorDescriptorProto input = 2;</code>
     */
    public boolean hasInput() {
      return input_ != null;
    }
    /**
     * <code>.stream_executor.dnn.TensorDescriptorProto input = 2;</code>
     */
    public stream_executor.dnn.Dnn.TensorDescriptorProto getInput() {
      return input_ == null ? stream_executor.dnn.Dnn.TensorDescriptorProto.getDefaultInstance() : input_;
    }
    /**
     * <code>.stream_executor.dnn.TensorDescriptorProto input = 2;</code>
     */
    public stream_executor.dnn.Dnn.TensorDescriptorProtoOrBuilder getInputOrBuilder() {
      return getInput();
    }

    public static final int FILTER_FIELD_NUMBER = 3;
    private stream_executor.dnn.Dnn.TensorDescriptorProto filter_;
    /**
     * <code>.stream_executor.dnn.TensorDescriptorProto filter = 3;</code>
     */
    public boolean hasFilter() {
      return filter_ != null;
    }
    /**
     * <code>.stream_executor.dnn.TensorDescriptorProto filter = 3;</code>
     */
    public stream_executor.dnn.Dnn.TensorDescriptorProto getFilter() {
      return filter_ == null ? stream_executor.dnn.Dnn.TensorDescriptorProto.getDefaultInstance() : filter_;
    }
    /**
     * <code>.stream_executor.dnn.TensorDescriptorProto filter = 3;</code>
     */
    public stream_executor.dnn.Dnn.TensorDescriptorProtoOrBuilder getFilterOrBuilder() {
      return getFilter();
    }

    public static final int OUTPUT_FIELD_NUMBER = 4;
    private stream_executor.dnn.Dnn.TensorDescriptorProto output_;
    /**
     * <code>.stream_executor.dnn.TensorDescriptorProto output = 4;</code>
     */
    public boolean hasOutput() {
      return output_ != null;
    }
    /**
     * <code>.stream_executor.dnn.TensorDescriptorProto output = 4;</code>
     */
    public stream_executor.dnn.Dnn.TensorDescriptorProto getOutput() {
      return output_ == null ? stream_executor.dnn.Dnn.TensorDescriptorProto.getDefaultInstance() : output_;
    }
    /**
     * <code>.stream_executor.dnn.TensorDescriptorProto output = 4;</code>
     */
    public stream_executor.dnn.Dnn.TensorDescriptorProtoOrBuilder getOutputOrBuilder() {
      return getOutput();
    }

    public static final int ALGORITHM_FIELD_NUMBER = 5;
    private stream_executor.dnn.Dnn.AlgorithmProto algorithm_;
    /**
     * <code>.stream_executor.dnn.AlgorithmProto algorithm = 5;</code>
     */
    public boolean hasAlgorithm() {
      return algorithm_ != null;
    }
    /**
     * <code>.stream_executor.dnn.AlgorithmProto algorithm = 5;</code>
     */
    public stream_executor.dnn.Dnn.AlgorithmProto getAlgorithm() {
      return algorithm_ == null ? stream_executor.dnn.Dnn.AlgorithmProto.getDefaultInstance() : algorithm_;
    }
    /**
     * <code>.stream_executor.dnn.AlgorithmProto algorithm = 5;</code>
     */
    public stream_executor.dnn.Dnn.AlgorithmProtoOrBuilder getAlgorithmOrBuilder() {
      return getAlgorithm();
    }

    public static final int CONV_DESC_FIELD_NUMBER = 6;
    private stream_executor.dnn.Dnn.ConvolutionDescriptorProto convDesc_;
    /**
     * <code>.stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 6;</code>
     */
    public boolean hasConvDesc() {
      return convDesc_ != null;
    }
    /**
     * <code>.stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 6;</code>
     */
    public stream_executor.dnn.Dnn.ConvolutionDescriptorProto getConvDesc() {
      return convDesc_ == null ? stream_executor.dnn.Dnn.ConvolutionDescriptorProto.getDefaultInstance() : convDesc_;
    }
    /**
     * <code>.stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 6;</code>
     */
    public stream_executor.dnn.Dnn.ConvolutionDescriptorProtoOrBuilder getConvDescOrBuilder() {
      return getConvDesc();
    }

    public static final int CONV_SCALE_FIELD_NUMBER = 7;
    private double convScale_;
    /**
     * <pre>
     * result = conv_scale * conv(...) + side_value_scale * side_value.
     * side_value is an arbitrary buffer if activation is not none. Otherwise, it
     * has to be the result buffer (using its old values).
     * </pre>
     *
     * <code>double conv_scale = 7;</code>
     */
    public double getConvScale() {
      return convScale_;
    }

    public static final int SIDE_VALUE_SCALE_FIELD_NUMBER = 8;
    private double sideValueScale_;
    /**
     * <code>double side_value_scale = 8;</code>
     */
    public double getSideValueScale() {
      return sideValueScale_;
    }

    public static final int ACTIVATION_FIELD_NUMBER = 9;
    private int activation_;
    /**
     * <code>.stream_executor.dnn.ActivationMode activation = 9;</code>
     */
    public int getActivationValue() {
      return activation_;
    }
    /**
     * <code>.stream_executor.dnn.ActivationMode activation = 9;</code>
     */
    public stream_executor.dnn.Dnn.ActivationMode getActivation() {
      @SuppressWarnings("deprecation")
      stream_executor.dnn.Dnn.ActivationMode result = stream_executor.dnn.Dnn.ActivationMode.valueOf(activation_);
      return result == null ? stream_executor.dnn.Dnn.ActivationMode.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (kind_ != stream_executor.dnn.Dnn.ConvolutionKind.INVALID.getNumber()) {
        output.writeEnum(1, kind_);
      }
      if (input_ != null) {
        output.writeMessage(2, getInput());
      }
      if (filter_ != null) {
        output.writeMessage(3, getFilter());
      }
      if (output_ != null) {
        output.writeMessage(4, getOutput());
      }
      if (algorithm_ != null) {
        output.writeMessage(5, getAlgorithm());
      }
      if (convDesc_ != null) {
        output.writeMessage(6, getConvDesc());
      }
      if (convScale_ != 0D) {
        output.writeDouble(7, convScale_);
      }
      if (sideValueScale_ != 0D) {
        output.writeDouble(8, sideValueScale_);
      }
      if (activation_ != stream_executor.dnn.Dnn.ActivationMode.kNone.getNumber()) {
        output.writeEnum(9, activation_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (kind_ != stream_executor.dnn.Dnn.ConvolutionKind.INVALID.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, kind_);
      }
      if (input_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getInput());
      }
      if (filter_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getFilter());
      }
      if (output_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getOutput());
      }
      if (algorithm_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getAlgorithm());
      }
      if (convDesc_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getConvDesc());
      }
      if (convScale_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, convScale_);
      }
      if (sideValueScale_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, sideValueScale_);
      }
      if (activation_ != stream_executor.dnn.Dnn.ActivationMode.kNone.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(9, activation_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof stream_executor.dnn.Dnn.ConvolutionProto)) {
        return super.equals(obj);
      }
      stream_executor.dnn.Dnn.ConvolutionProto other = (stream_executor.dnn.Dnn.ConvolutionProto) obj;

      boolean result = true;
      result = result && kind_ == other.kind_;
      result = result && (hasInput() == other.hasInput());
      if (hasInput()) {
        result = result && getInput()
            .equals(other.getInput());
      }
      result = result && (hasFilter() == other.hasFilter());
      if (hasFilter()) {
        result = result && getFilter()
            .equals(other.getFilter());
      }
      result = result && (hasOutput() == other.hasOutput());
      if (hasOutput()) {
        result = result && getOutput()
            .equals(other.getOutput());
      }
      result = result && (hasAlgorithm() == other.hasAlgorithm());
      if (hasAlgorithm()) {
        result = result && getAlgorithm()
            .equals(other.getAlgorithm());
      }
      result = result && (hasConvDesc() == other.hasConvDesc());
      if (hasConvDesc()) {
        result = result && getConvDesc()
            .equals(other.getConvDesc());
      }
      result = result && (
          java.lang.Double.doubleToLongBits(getConvScale())
          == java.lang.Double.doubleToLongBits(
              other.getConvScale()));
      result = result && (
          java.lang.Double.doubleToLongBits(getSideValueScale())
          == java.lang.Double.doubleToLongBits(
              other.getSideValueScale()));
      result = result && activation_ == other.activation_;
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + KIND_FIELD_NUMBER;
      hash = (53 * hash) + kind_;
      if (hasInput()) {
        hash = (37 * hash) + INPUT_FIELD_NUMBER;
        hash = (53 * hash) + getInput().hashCode();
      }
      if (hasFilter()) {
        hash = (37 * hash) + FILTER_FIELD_NUMBER;
        hash = (53 * hash) + getFilter().hashCode();
      }
      if (hasOutput()) {
        hash = (37 * hash) + OUTPUT_FIELD_NUMBER;
        hash = (53 * hash) + getOutput().hashCode();
      }
      if (hasAlgorithm()) {
        hash = (37 * hash) + ALGORITHM_FIELD_NUMBER;
        hash = (53 * hash) + getAlgorithm().hashCode();
      }
      if (hasConvDesc()) {
        hash = (37 * hash) + CONV_DESC_FIELD_NUMBER;
        hash = (53 * hash) + getConvDesc().hashCode();
      }
      hash = (37 * hash) + CONV_SCALE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getConvScale()));
      hash = (37 * hash) + SIDE_VALUE_SCALE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getSideValueScale()));
      hash = (37 * hash) + ACTIVATION_FIELD_NUMBER;
      hash = (53 * hash) + activation_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static stream_executor.dnn.Dnn.ConvolutionProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.ConvolutionProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.ConvolutionProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.ConvolutionProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.ConvolutionProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static stream_executor.dnn.Dnn.ConvolutionProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.ConvolutionProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.ConvolutionProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.ConvolutionProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.ConvolutionProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static stream_executor.dnn.Dnn.ConvolutionProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static stream_executor.dnn.Dnn.ConvolutionProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(stream_executor.dnn.Dnn.ConvolutionProto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A convolution. Currently it's only used for logging. In the future, we may
     * want to use it in the API as well.
     * </pre>
     *
     * Protobuf type {@code stream_executor.dnn.ConvolutionProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:stream_executor.dnn.ConvolutionProto)
        stream_executor.dnn.Dnn.ConvolutionProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_ConvolutionProto_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_ConvolutionProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                stream_executor.dnn.Dnn.ConvolutionProto.class, stream_executor.dnn.Dnn.ConvolutionProto.Builder.class);
      }

      // Construct using stream_executor.dnn.Dnn.ConvolutionProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        kind_ = 0;

        if (inputBuilder_ == null) {
          input_ = null;
        } else {
          input_ = null;
          inputBuilder_ = null;
        }
        if (filterBuilder_ == null) {
          filter_ = null;
        } else {
          filter_ = null;
          filterBuilder_ = null;
        }
        if (outputBuilder_ == null) {
          output_ = null;
        } else {
          output_ = null;
          outputBuilder_ = null;
        }
        if (algorithmBuilder_ == null) {
          algorithm_ = null;
        } else {
          algorithm_ = null;
          algorithmBuilder_ = null;
        }
        if (convDescBuilder_ == null) {
          convDesc_ = null;
        } else {
          convDesc_ = null;
          convDescBuilder_ = null;
        }
        convScale_ = 0D;

        sideValueScale_ = 0D;

        activation_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return stream_executor.dnn.Dnn.internal_static_stream_executor_dnn_ConvolutionProto_descriptor;
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.ConvolutionProto getDefaultInstanceForType() {
        return stream_executor.dnn.Dnn.ConvolutionProto.getDefaultInstance();
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.ConvolutionProto build() {
        stream_executor.dnn.Dnn.ConvolutionProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public stream_executor.dnn.Dnn.ConvolutionProto buildPartial() {
        stream_executor.dnn.Dnn.ConvolutionProto result = new stream_executor.dnn.Dnn.ConvolutionProto(this);
        result.kind_ = kind_;
        if (inputBuilder_ == null) {
          result.input_ = input_;
        } else {
          result.input_ = inputBuilder_.build();
        }
        if (filterBuilder_ == null) {
          result.filter_ = filter_;
        } else {
          result.filter_ = filterBuilder_.build();
        }
        if (outputBuilder_ == null) {
          result.output_ = output_;
        } else {
          result.output_ = outputBuilder_.build();
        }
        if (algorithmBuilder_ == null) {
          result.algorithm_ = algorithm_;
        } else {
          result.algorithm_ = algorithmBuilder_.build();
        }
        if (convDescBuilder_ == null) {
          result.convDesc_ = convDesc_;
        } else {
          result.convDesc_ = convDescBuilder_.build();
        }
        result.convScale_ = convScale_;
        result.sideValueScale_ = sideValueScale_;
        result.activation_ = activation_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof stream_executor.dnn.Dnn.ConvolutionProto) {
          return mergeFrom((stream_executor.dnn.Dnn.ConvolutionProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(stream_executor.dnn.Dnn.ConvolutionProto other) {
        if (other == stream_executor.dnn.Dnn.ConvolutionProto.getDefaultInstance()) return this;
        if (other.kind_ != 0) {
          setKindValue(other.getKindValue());
        }
        if (other.hasInput()) {
          mergeInput(other.getInput());
        }
        if (other.hasFilter()) {
          mergeFilter(other.getFilter());
        }
        if (other.hasOutput()) {
          mergeOutput(other.getOutput());
        }
        if (other.hasAlgorithm()) {
          mergeAlgorithm(other.getAlgorithm());
        }
        if (other.hasConvDesc()) {
          mergeConvDesc(other.getConvDesc());
        }
        if (other.getConvScale() != 0D) {
          setConvScale(other.getConvScale());
        }
        if (other.getSideValueScale() != 0D) {
          setSideValueScale(other.getSideValueScale());
        }
        if (other.activation_ != 0) {
          setActivationValue(other.getActivationValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        stream_executor.dnn.Dnn.ConvolutionProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (stream_executor.dnn.Dnn.ConvolutionProto) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int kind_ = 0;
      /**
       * <code>.stream_executor.dnn.ConvolutionKind kind = 1;</code>
       */
      public int getKindValue() {
        return kind_;
      }
      /**
       * <code>.stream_executor.dnn.ConvolutionKind kind = 1;</code>
       */
      public Builder setKindValue(int value) {
        kind_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.ConvolutionKind kind = 1;</code>
       */
      public stream_executor.dnn.Dnn.ConvolutionKind getKind() {
        @SuppressWarnings("deprecation")
        stream_executor.dnn.Dnn.ConvolutionKind result = stream_executor.dnn.Dnn.ConvolutionKind.valueOf(kind_);
        return result == null ? stream_executor.dnn.Dnn.ConvolutionKind.UNRECOGNIZED : result;
      }
      /**
       * <code>.stream_executor.dnn.ConvolutionKind kind = 1;</code>
       */
      public Builder setKind(stream_executor.dnn.Dnn.ConvolutionKind value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        kind_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.ConvolutionKind kind = 1;</code>
       */
      public Builder clearKind() {
        
        kind_ = 0;
        onChanged();
        return this;
      }

      private stream_executor.dnn.Dnn.TensorDescriptorProto input_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          stream_executor.dnn.Dnn.TensorDescriptorProto, stream_executor.dnn.Dnn.TensorDescriptorProto.Builder, stream_executor.dnn.Dnn.TensorDescriptorProtoOrBuilder> inputBuilder_;
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto input = 2;</code>
       */
      public boolean hasInput() {
        return inputBuilder_ != null || input_ != null;
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto input = 2;</code>
       */
      public stream_executor.dnn.Dnn.TensorDescriptorProto getInput() {
        if (inputBuilder_ == null) {
          return input_ == null ? stream_executor.dnn.Dnn.TensorDescriptorProto.getDefaultInstance() : input_;
        } else {
          return inputBuilder_.getMessage();
        }
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto input = 2;</code>
       */
      public Builder setInput(stream_executor.dnn.Dnn.TensorDescriptorProto value) {
        if (inputBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          input_ = value;
          onChanged();
        } else {
          inputBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto input = 2;</code>
       */
      public Builder setInput(
          stream_executor.dnn.Dnn.TensorDescriptorProto.Builder builderForValue) {
        if (inputBuilder_ == null) {
          input_ = builderForValue.build();
          onChanged();
        } else {
          inputBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto input = 2;</code>
       */
      public Builder mergeInput(stream_executor.dnn.Dnn.TensorDescriptorProto value) {
        if (inputBuilder_ == null) {
          if (input_ != null) {
            input_ =
              stream_executor.dnn.Dnn.TensorDescriptorProto.newBuilder(input_).mergeFrom(value).buildPartial();
          } else {
            input_ = value;
          }
          onChanged();
        } else {
          inputBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto input = 2;</code>
       */
      public Builder clearInput() {
        if (inputBuilder_ == null) {
          input_ = null;
          onChanged();
        } else {
          input_ = null;
          inputBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto input = 2;</code>
       */
      public stream_executor.dnn.Dnn.TensorDescriptorProto.Builder getInputBuilder() {
        
        onChanged();
        return getInputFieldBuilder().getBuilder();
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto input = 2;</code>
       */
      public stream_executor.dnn.Dnn.TensorDescriptorProtoOrBuilder getInputOrBuilder() {
        if (inputBuilder_ != null) {
          return inputBuilder_.getMessageOrBuilder();
        } else {
          return input_ == null ?
              stream_executor.dnn.Dnn.TensorDescriptorProto.getDefaultInstance() : input_;
        }
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto input = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          stream_executor.dnn.Dnn.TensorDescriptorProto, stream_executor.dnn.Dnn.TensorDescriptorProto.Builder, stream_executor.dnn.Dnn.TensorDescriptorProtoOrBuilder> 
          getInputFieldBuilder() {
        if (inputBuilder_ == null) {
          inputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              stream_executor.dnn.Dnn.TensorDescriptorProto, stream_executor.dnn.Dnn.TensorDescriptorProto.Builder, stream_executor.dnn.Dnn.TensorDescriptorProtoOrBuilder>(
                  getInput(),
                  getParentForChildren(),
                  isClean());
          input_ = null;
        }
        return inputBuilder_;
      }

      private stream_executor.dnn.Dnn.TensorDescriptorProto filter_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          stream_executor.dnn.Dnn.TensorDescriptorProto, stream_executor.dnn.Dnn.TensorDescriptorProto.Builder, stream_executor.dnn.Dnn.TensorDescriptorProtoOrBuilder> filterBuilder_;
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto filter = 3;</code>
       */
      public boolean hasFilter() {
        return filterBuilder_ != null || filter_ != null;
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto filter = 3;</code>
       */
      public stream_executor.dnn.Dnn.TensorDescriptorProto getFilter() {
        if (filterBuilder_ == null) {
          return filter_ == null ? stream_executor.dnn.Dnn.TensorDescriptorProto.getDefaultInstance() : filter_;
        } else {
          return filterBuilder_.getMessage();
        }
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto filter = 3;</code>
       */
      public Builder setFilter(stream_executor.dnn.Dnn.TensorDescriptorProto value) {
        if (filterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filter_ = value;
          onChanged();
        } else {
          filterBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto filter = 3;</code>
       */
      public Builder setFilter(
          stream_executor.dnn.Dnn.TensorDescriptorProto.Builder builderForValue) {
        if (filterBuilder_ == null) {
          filter_ = builderForValue.build();
          onChanged();
        } else {
          filterBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto filter = 3;</code>
       */
      public Builder mergeFilter(stream_executor.dnn.Dnn.TensorDescriptorProto value) {
        if (filterBuilder_ == null) {
          if (filter_ != null) {
            filter_ =
              stream_executor.dnn.Dnn.TensorDescriptorProto.newBuilder(filter_).mergeFrom(value).buildPartial();
          } else {
            filter_ = value;
          }
          onChanged();
        } else {
          filterBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto filter = 3;</code>
       */
      public Builder clearFilter() {
        if (filterBuilder_ == null) {
          filter_ = null;
          onChanged();
        } else {
          filter_ = null;
          filterBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto filter = 3;</code>
       */
      public stream_executor.dnn.Dnn.TensorDescriptorProto.Builder getFilterBuilder() {
        
        onChanged();
        return getFilterFieldBuilder().getBuilder();
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto filter = 3;</code>
       */
      public stream_executor.dnn.Dnn.TensorDescriptorProtoOrBuilder getFilterOrBuilder() {
        if (filterBuilder_ != null) {
          return filterBuilder_.getMessageOrBuilder();
        } else {
          return filter_ == null ?
              stream_executor.dnn.Dnn.TensorDescriptorProto.getDefaultInstance() : filter_;
        }
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto filter = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          stream_executor.dnn.Dnn.TensorDescriptorProto, stream_executor.dnn.Dnn.TensorDescriptorProto.Builder, stream_executor.dnn.Dnn.TensorDescriptorProtoOrBuilder> 
          getFilterFieldBuilder() {
        if (filterBuilder_ == null) {
          filterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              stream_executor.dnn.Dnn.TensorDescriptorProto, stream_executor.dnn.Dnn.TensorDescriptorProto.Builder, stream_executor.dnn.Dnn.TensorDescriptorProtoOrBuilder>(
                  getFilter(),
                  getParentForChildren(),
                  isClean());
          filter_ = null;
        }
        return filterBuilder_;
      }

      private stream_executor.dnn.Dnn.TensorDescriptorProto output_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          stream_executor.dnn.Dnn.TensorDescriptorProto, stream_executor.dnn.Dnn.TensorDescriptorProto.Builder, stream_executor.dnn.Dnn.TensorDescriptorProtoOrBuilder> outputBuilder_;
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto output = 4;</code>
       */
      public boolean hasOutput() {
        return outputBuilder_ != null || output_ != null;
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto output = 4;</code>
       */
      public stream_executor.dnn.Dnn.TensorDescriptorProto getOutput() {
        if (outputBuilder_ == null) {
          return output_ == null ? stream_executor.dnn.Dnn.TensorDescriptorProto.getDefaultInstance() : output_;
        } else {
          return outputBuilder_.getMessage();
        }
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto output = 4;</code>
       */
      public Builder setOutput(stream_executor.dnn.Dnn.TensorDescriptorProto value) {
        if (outputBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          output_ = value;
          onChanged();
        } else {
          outputBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto output = 4;</code>
       */
      public Builder setOutput(
          stream_executor.dnn.Dnn.TensorDescriptorProto.Builder builderForValue) {
        if (outputBuilder_ == null) {
          output_ = builderForValue.build();
          onChanged();
        } else {
          outputBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto output = 4;</code>
       */
      public Builder mergeOutput(stream_executor.dnn.Dnn.TensorDescriptorProto value) {
        if (outputBuilder_ == null) {
          if (output_ != null) {
            output_ =
              stream_executor.dnn.Dnn.TensorDescriptorProto.newBuilder(output_).mergeFrom(value).buildPartial();
          } else {
            output_ = value;
          }
          onChanged();
        } else {
          outputBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto output = 4;</code>
       */
      public Builder clearOutput() {
        if (outputBuilder_ == null) {
          output_ = null;
          onChanged();
        } else {
          output_ = null;
          outputBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto output = 4;</code>
       */
      public stream_executor.dnn.Dnn.TensorDescriptorProto.Builder getOutputBuilder() {
        
        onChanged();
        return getOutputFieldBuilder().getBuilder();
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto output = 4;</code>
       */
      public stream_executor.dnn.Dnn.TensorDescriptorProtoOrBuilder getOutputOrBuilder() {
        if (outputBuilder_ != null) {
          return outputBuilder_.getMessageOrBuilder();
        } else {
          return output_ == null ?
              stream_executor.dnn.Dnn.TensorDescriptorProto.getDefaultInstance() : output_;
        }
      }
      /**
       * <code>.stream_executor.dnn.TensorDescriptorProto output = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          stream_executor.dnn.Dnn.TensorDescriptorProto, stream_executor.dnn.Dnn.TensorDescriptorProto.Builder, stream_executor.dnn.Dnn.TensorDescriptorProtoOrBuilder> 
          getOutputFieldBuilder() {
        if (outputBuilder_ == null) {
          outputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              stream_executor.dnn.Dnn.TensorDescriptorProto, stream_executor.dnn.Dnn.TensorDescriptorProto.Builder, stream_executor.dnn.Dnn.TensorDescriptorProtoOrBuilder>(
                  getOutput(),
                  getParentForChildren(),
                  isClean());
          output_ = null;
        }
        return outputBuilder_;
      }

      private stream_executor.dnn.Dnn.AlgorithmProto algorithm_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          stream_executor.dnn.Dnn.AlgorithmProto, stream_executor.dnn.Dnn.AlgorithmProto.Builder, stream_executor.dnn.Dnn.AlgorithmProtoOrBuilder> algorithmBuilder_;
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm = 5;</code>
       */
      public boolean hasAlgorithm() {
        return algorithmBuilder_ != null || algorithm_ != null;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm = 5;</code>
       */
      public stream_executor.dnn.Dnn.AlgorithmProto getAlgorithm() {
        if (algorithmBuilder_ == null) {
          return algorithm_ == null ? stream_executor.dnn.Dnn.AlgorithmProto.getDefaultInstance() : algorithm_;
        } else {
          return algorithmBuilder_.getMessage();
        }
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm = 5;</code>
       */
      public Builder setAlgorithm(stream_executor.dnn.Dnn.AlgorithmProto value) {
        if (algorithmBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          algorithm_ = value;
          onChanged();
        } else {
          algorithmBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm = 5;</code>
       */
      public Builder setAlgorithm(
          stream_executor.dnn.Dnn.AlgorithmProto.Builder builderForValue) {
        if (algorithmBuilder_ == null) {
          algorithm_ = builderForValue.build();
          onChanged();
        } else {
          algorithmBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm = 5;</code>
       */
      public Builder mergeAlgorithm(stream_executor.dnn.Dnn.AlgorithmProto value) {
        if (algorithmBuilder_ == null) {
          if (algorithm_ != null) {
            algorithm_ =
              stream_executor.dnn.Dnn.AlgorithmProto.newBuilder(algorithm_).mergeFrom(value).buildPartial();
          } else {
            algorithm_ = value;
          }
          onChanged();
        } else {
          algorithmBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm = 5;</code>
       */
      public Builder clearAlgorithm() {
        if (algorithmBuilder_ == null) {
          algorithm_ = null;
          onChanged();
        } else {
          algorithm_ = null;
          algorithmBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm = 5;</code>
       */
      public stream_executor.dnn.Dnn.AlgorithmProto.Builder getAlgorithmBuilder() {
        
        onChanged();
        return getAlgorithmFieldBuilder().getBuilder();
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm = 5;</code>
       */
      public stream_executor.dnn.Dnn.AlgorithmProtoOrBuilder getAlgorithmOrBuilder() {
        if (algorithmBuilder_ != null) {
          return algorithmBuilder_.getMessageOrBuilder();
        } else {
          return algorithm_ == null ?
              stream_executor.dnn.Dnn.AlgorithmProto.getDefaultInstance() : algorithm_;
        }
      }
      /**
       * <code>.stream_executor.dnn.AlgorithmProto algorithm = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          stream_executor.dnn.Dnn.AlgorithmProto, stream_executor.dnn.Dnn.AlgorithmProto.Builder, stream_executor.dnn.Dnn.AlgorithmProtoOrBuilder> 
          getAlgorithmFieldBuilder() {
        if (algorithmBuilder_ == null) {
          algorithmBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              stream_executor.dnn.Dnn.AlgorithmProto, stream_executor.dnn.Dnn.AlgorithmProto.Builder, stream_executor.dnn.Dnn.AlgorithmProtoOrBuilder>(
                  getAlgorithm(),
                  getParentForChildren(),
                  isClean());
          algorithm_ = null;
        }
        return algorithmBuilder_;
      }

      private stream_executor.dnn.Dnn.ConvolutionDescriptorProto convDesc_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          stream_executor.dnn.Dnn.ConvolutionDescriptorProto, stream_executor.dnn.Dnn.ConvolutionDescriptorProto.Builder, stream_executor.dnn.Dnn.ConvolutionDescriptorProtoOrBuilder> convDescBuilder_;
      /**
       * <code>.stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 6;</code>
       */
      public boolean hasConvDesc() {
        return convDescBuilder_ != null || convDesc_ != null;
      }
      /**
       * <code>.stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 6;</code>
       */
      public stream_executor.dnn.Dnn.ConvolutionDescriptorProto getConvDesc() {
        if (convDescBuilder_ == null) {
          return convDesc_ == null ? stream_executor.dnn.Dnn.ConvolutionDescriptorProto.getDefaultInstance() : convDesc_;
        } else {
          return convDescBuilder_.getMessage();
        }
      }
      /**
       * <code>.stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 6;</code>
       */
      public Builder setConvDesc(stream_executor.dnn.Dnn.ConvolutionDescriptorProto value) {
        if (convDescBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          convDesc_ = value;
          onChanged();
        } else {
          convDescBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 6;</code>
       */
      public Builder setConvDesc(
          stream_executor.dnn.Dnn.ConvolutionDescriptorProto.Builder builderForValue) {
        if (convDescBuilder_ == null) {
          convDesc_ = builderForValue.build();
          onChanged();
        } else {
          convDescBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 6;</code>
       */
      public Builder mergeConvDesc(stream_executor.dnn.Dnn.ConvolutionDescriptorProto value) {
        if (convDescBuilder_ == null) {
          if (convDesc_ != null) {
            convDesc_ =
              stream_executor.dnn.Dnn.ConvolutionDescriptorProto.newBuilder(convDesc_).mergeFrom(value).buildPartial();
          } else {
            convDesc_ = value;
          }
          onChanged();
        } else {
          convDescBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 6;</code>
       */
      public Builder clearConvDesc() {
        if (convDescBuilder_ == null) {
          convDesc_ = null;
          onChanged();
        } else {
          convDesc_ = null;
          convDescBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 6;</code>
       */
      public stream_executor.dnn.Dnn.ConvolutionDescriptorProto.Builder getConvDescBuilder() {
        
        onChanged();
        return getConvDescFieldBuilder().getBuilder();
      }
      /**
       * <code>.stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 6;</code>
       */
      public stream_executor.dnn.Dnn.ConvolutionDescriptorProtoOrBuilder getConvDescOrBuilder() {
        if (convDescBuilder_ != null) {
          return convDescBuilder_.getMessageOrBuilder();
        } else {
          return convDesc_ == null ?
              stream_executor.dnn.Dnn.ConvolutionDescriptorProto.getDefaultInstance() : convDesc_;
        }
      }
      /**
       * <code>.stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          stream_executor.dnn.Dnn.ConvolutionDescriptorProto, stream_executor.dnn.Dnn.ConvolutionDescriptorProto.Builder, stream_executor.dnn.Dnn.ConvolutionDescriptorProtoOrBuilder> 
          getConvDescFieldBuilder() {
        if (convDescBuilder_ == null) {
          convDescBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              stream_executor.dnn.Dnn.ConvolutionDescriptorProto, stream_executor.dnn.Dnn.ConvolutionDescriptorProto.Builder, stream_executor.dnn.Dnn.ConvolutionDescriptorProtoOrBuilder>(
                  getConvDesc(),
                  getParentForChildren(),
                  isClean());
          convDesc_ = null;
        }
        return convDescBuilder_;
      }

      private double convScale_ ;
      /**
       * <pre>
       * result = conv_scale * conv(...) + side_value_scale * side_value.
       * side_value is an arbitrary buffer if activation is not none. Otherwise, it
       * has to be the result buffer (using its old values).
       * </pre>
       *
       * <code>double conv_scale = 7;</code>
       */
      public double getConvScale() {
        return convScale_;
      }
      /**
       * <pre>
       * result = conv_scale * conv(...) + side_value_scale * side_value.
       * side_value is an arbitrary buffer if activation is not none. Otherwise, it
       * has to be the result buffer (using its old values).
       * </pre>
       *
       * <code>double conv_scale = 7;</code>
       */
      public Builder setConvScale(double value) {
        
        convScale_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * result = conv_scale * conv(...) + side_value_scale * side_value.
       * side_value is an arbitrary buffer if activation is not none. Otherwise, it
       * has to be the result buffer (using its old values).
       * </pre>
       *
       * <code>double conv_scale = 7;</code>
       */
      public Builder clearConvScale() {
        
        convScale_ = 0D;
        onChanged();
        return this;
      }

      private double sideValueScale_ ;
      /**
       * <code>double side_value_scale = 8;</code>
       */
      public double getSideValueScale() {
        return sideValueScale_;
      }
      /**
       * <code>double side_value_scale = 8;</code>
       */
      public Builder setSideValueScale(double value) {
        
        sideValueScale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double side_value_scale = 8;</code>
       */
      public Builder clearSideValueScale() {
        
        sideValueScale_ = 0D;
        onChanged();
        return this;
      }

      private int activation_ = 0;
      /**
       * <code>.stream_executor.dnn.ActivationMode activation = 9;</code>
       */
      public int getActivationValue() {
        return activation_;
      }
      /**
       * <code>.stream_executor.dnn.ActivationMode activation = 9;</code>
       */
      public Builder setActivationValue(int value) {
        activation_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.ActivationMode activation = 9;</code>
       */
      public stream_executor.dnn.Dnn.ActivationMode getActivation() {
        @SuppressWarnings("deprecation")
        stream_executor.dnn.Dnn.ActivationMode result = stream_executor.dnn.Dnn.ActivationMode.valueOf(activation_);
        return result == null ? stream_executor.dnn.Dnn.ActivationMode.UNRECOGNIZED : result;
      }
      /**
       * <code>.stream_executor.dnn.ActivationMode activation = 9;</code>
       */
      public Builder setActivation(stream_executor.dnn.Dnn.ActivationMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        activation_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.stream_executor.dnn.ActivationMode activation = 9;</code>
       */
      public Builder clearActivation() {
        
        activation_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:stream_executor.dnn.ConvolutionProto)
    }

    // @@protoc_insertion_point(class_scope:stream_executor.dnn.ConvolutionProto)
    private static final stream_executor.dnn.Dnn.ConvolutionProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new stream_executor.dnn.Dnn.ConvolutionProto();
    }

    public static stream_executor.dnn.Dnn.ConvolutionProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ConvolutionProto>
        PARSER = new com.google.protobuf.AbstractParser<ConvolutionProto>() {
      @java.lang.Override
      public ConvolutionProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ConvolutionProto(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ConvolutionProto> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ConvolutionProto> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public stream_executor.dnn.Dnn.ConvolutionProto getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_stream_executor_dnn_TensorDescriptorProto_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_stream_executor_dnn_TensorDescriptorProto_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_stream_executor_dnn_AlgorithmProto_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_stream_executor_dnn_AlgorithmProto_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_stream_executor_dnn_ConvolutionDescriptorProto_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_stream_executor_dnn_ConvolutionDescriptorProto_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_stream_executor_dnn_ConvolutionProto_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_stream_executor_dnn_ConvolutionProto_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\tdnn.proto\022\023stream_executor.dnn\"\341\001\n\025Ten" +
      "sorDescriptorProto\022\022\n\ndimensions\030\001 \003(\003\0220" +
      "\n\tdata_type\030\002 \001(\0162\035.stream_executor.dnn." +
      "DataType\0226\n\013data_layout\030\003 \001(\0162\037.stream_e" +
      "xecutor.dnn.DataLayoutH\000\022:\n\rfilter_layou" +
      "t\030\004 \001(\0162!.stream_executor.dnn.FilterLayo" +
      "utH\000B\016\n\014layout_oneof\"\224\001\n\016AlgorithmProto\022" +
      "\017\n\007algo_id\030\001 \001(\003\022?\n\tmath_type\030\002 \001(\0162,.st" +
      "ream_executor.dnn.AlgorithmProto.MathTyp" +
      "e\"0\n\010MathType\022\020\n\014DEFAULT_MATH\020\000\022\022\n\016TENSO" +
      "R_OP_MATH\020\001\"\334\001\n\032ConvolutionDescriptorPro" +
      "to\022\020\n\010paddings\030\001 \003(\003\022\017\n\007strides\030\002 \003(\003\022\021\n" +
      "\tdilations\030\003 \003(\003\0223\n\014compute_mode\030\004 \001(\0162\035" +
      ".stream_executor.dnn.DataType\022\023\n\013group_c" +
      "ount\030\005 \001(\005\022>\n\020convolution_mode\030\006 \001(\0162$.s" +
      "tream_executor.dnn.ConvolutionMode\"\334\003\n\020C" +
      "onvolutionProto\0222\n\004kind\030\001 \001(\0162$.stream_e" +
      "xecutor.dnn.ConvolutionKind\0229\n\005input\030\002 \001" +
      "(\0132*.stream_executor.dnn.TensorDescripto" +
      "rProto\022:\n\006filter\030\003 \001(\0132*.stream_executor" +
      ".dnn.TensorDescriptorProto\022:\n\006output\030\004 \001" +
      "(\0132*.stream_executor.dnn.TensorDescripto" +
      "rProto\0226\n\talgorithm\030\005 \001(\0132#.stream_execu" +
      "tor.dnn.AlgorithmProto\022B\n\tconv_desc\030\006 \001(" +
      "\0132/.stream_executor.dnn.ConvolutionDescr" +
      "iptorProto\022\022\n\nconv_scale\030\007 \001(\001\022\030\n\020side_v" +
      "alue_scale\030\010 \001(\001\0227\n\nactivation\030\t \001(\0162#.s" +
      "tream_executor.dnn.ActivationMode*E\n\010Dat" +
      "aType\022\n\n\006kFloat\020\000\022\013\n\007kDouble\020\001\022\t\n\005kHalf\020" +
      "\002\022\t\n\005kInt8\020\003\022\n\n\006kInt32\020\004*l\n\nDataLayout\022\021" +
      "\n\rkYXDepthBatch\020\000\022\021\n\rkYXBatchDepth\020\001\022\021\n\r" +
      "kBatchYXDepth\020\002\022\021\n\rkBatchDepthYX\020\003\022\022\n\016kB" +
      "atchDepthYX4\020\004*s\n\014FilterLayout\022\022\n\016kOutpu" +
      "tInputYX\020\000\022\022\n\016kOutputYXInput\020\001\022\023\n\017kOutpu" +
      "tInputYX4\020\002\022\022\n\016kInputYXOutput\020\003\022\022\n\016kYXIn" +
      "putOutput\020\004*f\n\016ActivationMode\022\t\n\005kNone\020\000" +
      "\022\014\n\010kSigmoid\020\001\022\t\n\005kRelu\020\002\022\n\n\006kRelu6\020\003\022\n\n" +
      "\006kReluX\020\004\022\t\n\005kTanh\020\005\022\r\n\tkBandPass\020\006*9\n\017C" +
      "onvolutionMode\022\025\n\021CROSS_CORRELATION\020\000\022\017\n" +
      "\013CONVOLUTION\020\001*S\n\017ConvolutionKind\022\013\n\007INV" +
      "ALID\020\000\022\013\n\007FORWARD\020\001\022\023\n\017BACKWARD_FILTER\020\002" +
      "\022\021\n\rBACKWARD_DATA\020\003b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_stream_executor_dnn_TensorDescriptorProto_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_stream_executor_dnn_TensorDescriptorProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_stream_executor_dnn_TensorDescriptorProto_descriptor,
        new java.lang.String[] { "Dimensions", "DataType", "DataLayout", "FilterLayout", "LayoutOneof", });
    internal_static_stream_executor_dnn_AlgorithmProto_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_stream_executor_dnn_AlgorithmProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_stream_executor_dnn_AlgorithmProto_descriptor,
        new java.lang.String[] { "AlgoId", "MathType", });
    internal_static_stream_executor_dnn_ConvolutionDescriptorProto_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_stream_executor_dnn_ConvolutionDescriptorProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_stream_executor_dnn_ConvolutionDescriptorProto_descriptor,
        new java.lang.String[] { "Paddings", "Strides", "Dilations", "ComputeMode", "GroupCount", "ConvolutionMode", });
    internal_static_stream_executor_dnn_ConvolutionProto_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_stream_executor_dnn_ConvolutionProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_stream_executor_dnn_ConvolutionProto_descriptor,
        new java.lang.String[] { "Kind", "Input", "Filter", "Output", "Algorithm", "ConvDesc", "ConvScale", "SideValueScale", "Activation", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
