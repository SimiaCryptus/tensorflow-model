/*
 * Copyright (c) 2019 by Andrew Charneski.
 *
 * The author licenses this file to you under the
 * Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance
 * with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: worker.proto

package org.tensorflow.distruntime;

public interface TraceOptsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:tensorflow.TraceOpts)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Length of the trace to be taken, in seconds.
   * </pre>
   *
   * <code>double duration = 1;</code>
   */
  double getDuration();

  /**
   * <pre>
   * If true, capture step profile locally in each worker. Currently
   * unimplemented.
   * </pre>
   *
   * <code>bool use_step_profiler = 2;</code>
   */
  boolean getUseStepProfiler();

  /**
   * <pre>
   * If true, capture kernel events from each worker.
   * </pre>
   *
   * <code>bool use_kernel_profiler = 3;</code>
   */
  boolean getUseKernelProfiler();

  /**
   * <pre>
   * If true, capture extended profiling events from TensorFlow process.
   * </pre>
   *
   * <code>bool use_extended_profiler = 4;</code>
   */
  boolean getUseExtendedProfiler();

  /**
   * <pre>
   * If true, capture GPU profiling events locally on each
   * machine. Currently unimplemented.
   * </pre>
   *
   * <code>bool use_gpu_profiler = 5;</code>
   */
  boolean getUseGpuProfiler();

  /**
   * <pre>
   * If true, collect sampled profile events. Currently unimplemented.
   * </pre>
   *
   * <code>bool use_sample_profiler = 6;</code>
   */
  boolean getUseSampleProfiler();
}
