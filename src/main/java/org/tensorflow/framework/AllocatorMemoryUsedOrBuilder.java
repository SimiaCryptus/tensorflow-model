/*
 * Copyright (c) 2019 by Andrew Charneski.
 *
 * The author licenses this file to you under the
 * Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance
 * with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: step_stats.proto

package org.tensorflow.framework;

public interface AllocatorMemoryUsedOrBuilder extends
    // @@protoc_insertion_point(interface_extends:tensorflow.AllocatorMemoryUsed)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>string allocator_name = 1;</code>
   */
  java.lang.String getAllocatorName();
  /**
   * <code>string allocator_name = 1;</code>
   */
  com.google.protobuf.ByteString
      getAllocatorNameBytes();

  /**
   * <pre>
   * These are per-node allocator memory stats.
   * </pre>
   *
   * <code>int64 total_bytes = 2;</code>
   */
  long getTotalBytes();

  /**
   * <code>int64 peak_bytes = 3;</code>
   */
  long getPeakBytes();

  /**
   * <pre>
   * The bytes that are not deallocated.
   * </pre>
   *
   * <code>int64 live_bytes = 4;</code>
   */
  long getLiveBytes();

  /**
   * <pre>
   * The allocation and deallocation timeline.
   * </pre>
   *
   * <code>repeated .tensorflow.AllocationRecord allocation_records = 6;</code>
   */
  java.util.List<org.tensorflow.framework.AllocationRecord> 
      getAllocationRecordsList();
  /**
   * <pre>
   * The allocation and deallocation timeline.
   * </pre>
   *
   * <code>repeated .tensorflow.AllocationRecord allocation_records = 6;</code>
   */
  org.tensorflow.framework.AllocationRecord getAllocationRecords(int index);
  /**
   * <pre>
   * The allocation and deallocation timeline.
   * </pre>
   *
   * <code>repeated .tensorflow.AllocationRecord allocation_records = 6;</code>
   */
  int getAllocationRecordsCount();
  /**
   * <pre>
   * The allocation and deallocation timeline.
   * </pre>
   *
   * <code>repeated .tensorflow.AllocationRecord allocation_records = 6;</code>
   */
  java.util.List<? extends org.tensorflow.framework.AllocationRecordOrBuilder> 
      getAllocationRecordsOrBuilderList();
  /**
   * <pre>
   * The allocation and deallocation timeline.
   * </pre>
   *
   * <code>repeated .tensorflow.AllocationRecord allocation_records = 6;</code>
   */
  org.tensorflow.framework.AllocationRecordOrBuilder getAllocationRecordsOrBuilder(
      int index);

  /**
   * <pre>
   * These are snapshots of the overall allocator memory stats.
   * The number of live bytes currently allocated by the allocator.
   * </pre>
   *
   * <code>int64 allocator_bytes_in_use = 5;</code>
   */
  long getAllocatorBytesInUse();
}
