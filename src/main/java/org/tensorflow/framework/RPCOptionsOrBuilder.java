/*
 * Copyright (c) 2019 by Andrew Charneski.
 *
 * The author licenses this file to you under the
 * Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance
 * with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

package org.tensorflow.framework;

public interface RPCOptionsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:tensorflow.RPCOptions)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * If true, always use RPC to contact the session target.
   * If false (the default option), TensorFlow may use an optimized
   * transport for client-master communication that avoids the RPC
   * stack. This option is primarily for used testing the RPC stack.
   * </pre>
   *
   * <code>bool use_rpc_for_inprocess_master = 1;</code>
   */
  boolean getUseRpcForInprocessMaster();

  /**
   * <pre>
   * The compression algorithm to be used. One of "deflate", "gzip".
   * </pre>
   *
   * <code>string compression_algorithm = 2;</code>
   */
  java.lang.String getCompressionAlgorithm();
  /**
   * <pre>
   * The compression algorithm to be used. One of "deflate", "gzip".
   * </pre>
   *
   * <code>string compression_algorithm = 2;</code>
   */
  com.google.protobuf.ByteString
      getCompressionAlgorithmBytes();

  /**
   * <pre>
   * If compression_algorithm is set, the compression level to be used.
   * From 0 (no compression), up to 3.
   * </pre>
   *
   * <code>int32 compression_level = 3;</code>
   */
  int getCompressionLevel();
}
